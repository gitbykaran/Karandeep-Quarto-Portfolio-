[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Karandeep Singh",
    "section": "",
    "text": "I turn raw data into powerful insights that drive business growth. With expertise in SQL, Python, Power BI, and Tableau, I uncover trends, optimize strategies, and make data work for decision-making. Let’s transform numbers into actionable intelligence! 🚀📊"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Indian Bikes Market Analysis",
    "section": "",
    "text": "Which Bike do Indians Prefers?\n\n\nProject Overview\nThis project analyzes the Indian bikes dataset using Python and SQL queries to extract valuable business insights. The dataset includes information on various motorcycle brands, models, engine specifications, pricing, and other key attributes. The analysis focuses on answering critical business questions related to sales trends, popular brands, engine capacities, and pricing distributions.\n\n\nImporting Neccessary Libraries\n\nimport kaggle as k \nimport pandas as pd \nimport kagglehub\nimport seaborn as sns \n\n\n\nDownloading the Dataset\n\nkagglehub.dataset_download(\"ak0212/indian-bike-sales-dataset\")\n\n\n\nBasic EDA\n\nbikes = pd.read_csv('bike_sales_india.csv')\nbikes.head()\n\n\n\n\n\n\n\n\nState\nAvg Daily Distance (km)\nBrand\nModel\nPrice (INR)\nYear of Manufacture\nEngine Capacity (cc)\nFuel Type\nMileage (km/l)\nOwner Type\nRegistration Year\nInsurance Status\nSeller Type\nResale Price (INR)\nCity Tier\n\n\n\n\n0\nKarnataka\n68.84\nRoyal Enfield\nHunter 350\n252816\n2021\n672\nElectric\n78.41\nSecond\n2024\nActive\nIndividual\n149934.18\nTier 3\n\n\n1\nRajasthan\n23.80\nBajaj\nDominar 400\n131100\n2020\n769\nHybrid\n89.98\nThird\n2023\nActive\nIndividual\n66960.30\nTier 3\n\n\n2\nMadhya Pradesh\n27.67\nKTM\n125 Duke\n201016\n2020\n216\nHybrid\n71.46\nSecond\n2023\nActive\nDealer\n141522.64\nTier 3\n\n\n3\nKarnataka\n62.85\nKawasaki\nNinja 300\n132482\n2021\n556\nPetrol\n51.73\nThird\n2021\nActive\nDealer\n56057.22\nTier 1\n\n\n4\nMadhya Pradesh\n10.62\nYamaha\nFZ V3\n231796\n2019\n298\nPetrol\n54.72\nThird\n2019\nNot Available\nIndividual\n132538.36\nTier 3\n\n\n\n\n\n\n\n\nbikes.info(), bikes.describe(), bikes.isnull().sum() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 15 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   State                    10000 non-null  object \n 1   Avg Daily Distance (km)  10000 non-null  float64\n 2   Brand                    10000 non-null  object \n 3   Model                    10000 non-null  object \n 4   Price (INR)              10000 non-null  int64  \n 5   Year of Manufacture      10000 non-null  int64  \n 6   Engine Capacity (cc)     10000 non-null  int64  \n 7   Fuel Type                10000 non-null  object \n 8   Mileage (km/l)           10000 non-null  float64\n 9   Owner Type               10000 non-null  object \n 10  Registration Year        10000 non-null  int64  \n 11  Insurance Status         10000 non-null  object \n 12  Seller Type              10000 non-null  object \n 13  Resale Price (INR)       10000 non-null  float64\n 14  City Tier                10000 non-null  object \ndtypes: float64(3), int64(4), object(8)\nmemory usage: 1.1+ MB\n\n\n(None,\n        Avg Daily Distance (km)    Price (INR)  Year of Manufacture  \\\n count             10000.000000   10000.000000         10000.000000   \n mean                 42.533128  224328.722400          2019.510500   \n std                  21.676985  100753.660447             2.907668   \n min                   5.010000   50031.000000          2015.000000   \n 25%                  23.907500  137900.250000          2017.000000   \n 50%                  42.480000  223878.000000          2019.000000   \n 75%                  61.352500  311464.250000          2022.000000   \n max                  80.000000  399981.000000          2024.000000   \n \n        Engine Capacity (cc)  Mileage (km/l)  Registration Year  \\\n count          10000.000000    10000.000000        10000.00000   \n mean             552.695300       67.188926         2020.96510   \n std              261.176292       20.891728            2.74897   \n min              100.000000       25.000000         2015.00000   \n 25%              327.000000       50.680000         2019.00000   \n 50%              553.000000       69.850000         2022.00000   \n 75%              780.000000       84.542500         2023.00000   \n max             1000.000000      100.000000         2024.00000   \n \n        Resale Price (INR)  \n count        10000.000000  \n mean        133828.973998  \n std          66613.220382  \n min          20532.070000  \n 25%          78680.905000  \n 50%         128148.340000  \n 75%         181048.192500  \n max         317302.450000  ,\n State                      0\n Avg Daily Distance (km)    0\n Brand                      0\n Model                      0\n Price (INR)                0\n Year of Manufacture        0\n Engine Capacity (cc)       0\n Fuel Type                  0\n Mileage (km/l)             0\n Owner Type                 0\n Registration Year          0\n Insurance Status           0\n Seller Type                0\n Resale Price (INR)         0\n City Tier                  0\n dtype: int64)\n\n\n\n\nData Preprocessing\n\nbikes.columns = bikes.columns.str.lower().str.replace(' ', '_')\nbikes.columns\n\nbikes.rename(columns={'avg_daily_distance_(km)':'avg_daily_distance','price_(inr)':'price_inr','resale_price_(inr)':'resale_price_inr'},inplace=True)\nbikes.rename(columns={'mileage_(km/l)':'mileage','engine_capacity_(cc)':'engine_capacity'},inplace=True)\n\n\n\nConnecting to Database\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\nbikes.to_sql('bikes',con=conn,if_exists='replace',index=False) \n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\nAnalysis (SQL Queries)\n\n\nWhat are the top-selling bike brands and models\n\n\n%%sql\nSELECT \nbrand,\nmodel,\nCOUNT(*) AS units_sold\nFROM bikes\nGROUP BY 1,2\nORDER BY 1 , 2 , 3 DESC;\n\n\n\n\n\n\n\n\nbrand\nmodel\nunits_sold\n\n\n\n\n0\nBajaj\nAvenger 220\n249\n\n\n1\nBajaj\nCT 100\n236\n\n\n2\nBajaj\nDominar 400\n233\n\n\n3\nBajaj\nPlatina 110\n228\n\n\n4\nBajaj\nPulsar 150\n261\n\n\n5\nHero\nGlamour\n258\n\n\n6\nHero\nHF Deluxe\n257\n\n\n7\nHero\nPassion Pro\n247\n\n\n8\nHero\nSplendor Plus\n228\n\n\n9\nHero\nXtreme 160R\n249\n\n\n10\nHonda\nActiva\n230\n\n\n11\nHonda\nCBR 650R\n248\n\n\n12\nHonda\nDio\n242\n\n\n13\nHonda\nShine\n244\n\n\n14\nHonda\nUnicorn\n257\n\n\n15\nKawasaki\nNinja 300\n256\n\n\n16\nKawasaki\nNinja 400\n255\n\n\n17\nKawasaki\nVersys 650\n261\n\n\n18\nKawasaki\nVulcan S\n267\n\n\n19\nKawasaki\nZ650\n252\n\n\n20\nKTM\n125 Duke\n231\n\n\n21\nKTM\n250 Duke\n269\n\n\n22\nKTM\n390 Adventure\n254\n\n\n23\nKTM\nDuke 200\n270\n\n\n24\nKTM\nRC 390\n248\n\n\n25\nRoyal Enfield\nClassic 350\n267\n\n\n26\nRoyal Enfield\nHimalayan\n249\n\n\n27\nRoyal Enfield\nHunter 350\n259\n\n\n28\nRoyal Enfield\nInterceptor 650\n264\n\n\n29\nRoyal Enfield\nMeteor 350\n214\n\n\n30\nTVS\nApache RTR 160\n227\n\n\n31\nTVS\nJupiter\n226\n\n\n32\nTVS\nNTorq 125\n271\n\n\n33\nTVS\nRonin\n252\n\n\n34\nTVS\nSport\n258\n\n\n35\nYamaha\nFascino 125\n248\n\n\n36\nYamaha\nFZ V3\n256\n\n\n37\nYamaha\nMT-15\n267\n\n\n38\nYamaha\nR15 V4\n233\n\n\n39\nYamaha\nRay ZR\n279\n\n\n\n\n\n\n\n\n\nWhat are the Brands Average Price(INR)\n\n\n%%sql \nSELECT \nbrand,\nmodel,\nROUND(AVG(price_inr),2) avg_price\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2,3 DESC;\n\n\n\n\n\n\n\n\nbrand\nmodel\navg_price\n\n\n\n\n0\nBajaj\nAvenger 220\n236263.02\n\n\n1\nBajaj\nCT 100\n229116.17\n\n\n2\nBajaj\nDominar 400\n219954.57\n\n\n3\nBajaj\nPlatina 110\n234069.37\n\n\n4\nBajaj\nPulsar 150\n233303.21\n\n\n5\nHero\nGlamour\n232147.26\n\n\n6\nHero\nHF Deluxe\n219995.73\n\n\n7\nHero\nPassion Pro\n221403.27\n\n\n8\nHero\nSplendor Plus\n236058.32\n\n\n9\nHero\nXtreme 160R\n221183.70\n\n\n10\nHonda\nActiva\n230481.32\n\n\n11\nHonda\nCBR 650R\n225379.57\n\n\n12\nHonda\nDio\n216609.00\n\n\n13\nHonda\nShine\n209988.51\n\n\n14\nHonda\nUnicorn\n223242.46\n\n\n15\nKawasaki\nNinja 300\n217552.12\n\n\n16\nKawasaki\nNinja 400\n221419.33\n\n\n17\nKawasaki\nVersys 650\n219403.90\n\n\n18\nKawasaki\nVulcan S\n231590.10\n\n\n19\nKawasaki\nZ650\n225589.97\n\n\n20\nKTM\n125 Duke\n222657.63\n\n\n21\nKTM\n250 Duke\n222430.67\n\n\n22\nKTM\n390 Adventure\n218125.41\n\n\n23\nKTM\nDuke 200\n225506.46\n\n\n24\nKTM\nRC 390\n224212.75\n\n\n25\nRoyal Enfield\nClassic 350\n219863.67\n\n\n26\nRoyal Enfield\nHimalayan\n214261.30\n\n\n27\nRoyal Enfield\nHunter 350\n233027.69\n\n\n28\nRoyal Enfield\nInterceptor 650\n222950.28\n\n\n29\nRoyal Enfield\nMeteor 350\n224339.43\n\n\n30\nTVS\nApache RTR 160\n207949.01\n\n\n31\nTVS\nJupiter\n232499.19\n\n\n32\nTVS\nNTorq 125\n217794.60\n\n\n33\nTVS\nRonin\n225114.23\n\n\n34\nTVS\nSport\n228783.99\n\n\n35\nYamaha\nFascino 125\n232287.48\n\n\n36\nYamaha\nFZ V3\n223681.22\n\n\n37\nYamaha\nMT-15\n227956.19\n\n\n38\nYamaha\nR15 V4\n219433.70\n\n\n39\nYamaha\nRay ZR\n225790.74\n\n\n\n\n\n\n\n\n\nWhat are the Fuel Types People Prefer the most with Average Price.\n\n\n%%sql \nSELECT \nfuel_type,\nCOUNT(*) count,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes \nGROUP BY 1\nORDER BY 2 DESC\n\n\n\n\n\n\n\n\nfuel_type\ncount\navg_price\n\n\n\n\n0\nHybrid\n3360\n225654\n\n\n1\nPetrol\n3357\n223561\n\n\n2\nElectric\n3283\n223757\n\n\n\n\n\n\n\n\n\nStates With Their Price Segment Preference\n\n\n%%sql\nSELECT \nstate,\nCASE\n    WHEN price_inr BETWEEN 50000 AND 100000 THEN 'Cheap'\n    WHEN price_inr BETWEEN 100000 AND 200000 THEN 'Expensive'\n    ELSE 'Premium'\nEND AS price_category,\nCOUNT(*) units_sold\nFROM bikes\nGROUP BY 1,2 \nORDER BY 1 \n\n\n\n\n\n\n\n\nstate\nprice_category\nunits_sold\n\n\n\n\n0\nDelhi\nCheap\n147\n\n\n1\nDelhi\nExpensive\n262\n\n\n2\nDelhi\nPremium\n568\n\n\n3\nGujarat\nCheap\n135\n\n\n4\nGujarat\nExpensive\n279\n\n\n5\nGujarat\nPremium\n588\n\n\n6\nKarnataka\nCheap\n139\n\n\n7\nKarnataka\nExpensive\n272\n\n\n8\nKarnataka\nPremium\n571\n\n\n9\nMadhya Pradesh\nCheap\n131\n\n\n10\nMadhya Pradesh\nExpensive\n319\n\n\n11\nMadhya Pradesh\nPremium\n523\n\n\n12\nMaharashtra\nCheap\n139\n\n\n13\nMaharashtra\nExpensive\n311\n\n\n14\nMaharashtra\nPremium\n580\n\n\n15\nPunjab\nCheap\n142\n\n\n16\nPunjab\nExpensive\n306\n\n\n17\nPunjab\nPremium\n603\n\n\n18\nRajasthan\nCheap\n151\n\n\n19\nRajasthan\nExpensive\n313\n\n\n20\nRajasthan\nPremium\n553\n\n\n21\nTamil Nadu\nCheap\n146\n\n\n22\nTamil Nadu\nExpensive\n260\n\n\n23\nTamil Nadu\nPremium\n588\n\n\n24\nUttar Pradesh\nCheap\n134\n\n\n25\nUttar Pradesh\nExpensive\n290\n\n\n26\nUttar Pradesh\nPremium\n579\n\n\n27\nWest Bengal\nCheap\n146\n\n\n28\nWest Bengal\nExpensive\n274\n\n\n29\nWest Bengal\nPremium\n551\n\n\n\n\n\n\n\n\n\nWhat is the Depriciation Percentage of Bikes in City Tiers?\n\n\n%%sql \nWITH tier_price AS\n(SELECT \ncity_tier,\nROUND(AVG(price_inr),0) avg_bike_price,\nROUND(AVG(resale_price_inr),0) avg_bike_resale_price\nFROM bikes\nGROUP BY 1 \nORDER BY 1\n)\nSELECT \n*,\nROUND(((avg_bike_price-avg_bike_resale_price)/avg_bike_price) * 100,2) AS depreciation_percentage\nFROM tier_price\n\n\n\n\n\n\n\n\ncity_tier\navg_bike_price\navg_bike_resale_price\ndepreciation_percentage\n\n\n\n\n0\nMetro\n224238\n133491.0\n40.47\n\n\n1\nTier 1\n224701\n133587.0\n40.55\n\n\n2\nTier 2\n223199\n133443.0\n40.21\n\n\n3\nTier 3\n225144\n134739.0\n40.15\n\n\n\n\n\n\n\n\n\nWho is selling bikes and their average selling price.\n\n\n%%sql \nSELECT \nseller_type,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n\n\n\n\n\n\n\nseller_type\navg_selling_price\n\n\n\n\n0\nIndividual\n132875.0\n\n\n1\nDealer\n134770.0\n\n\n\n\n\n\n\n\n\nWhat is the Price Distribution with Insurance Status ?\n\n\n%%sql \nSELECT \ninsurance_status,\nCOUNT(*) units,\nROUND(AVG(price_inr),0) avg_price,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n\n\n\n\n\n\n\ninsurance_status\nunits\navg_price\navg_selling_price\n\n\n\n\n0\nActive\n3321\n225597\n133795.0\n\n\n1\nNot Available\n3250\n221518\n132488.0\n\n\n2\nExpired\n3429\n225765\n135133.0\n\n\n\n\n\n\n\n\n\nWhat are the States Bike Distibution with their Average price and Most Expensive Bike Price ?\n\n\n%%sql\nSELECT \nstate,\nCOUNT(*) bikes_sold,\nAVG(price_inr) avg_bike_price,\nMAX(price_inr) highest_bike_price\nFROM bikes\nGROUP BY 1\nORDER BY 2 DESC ,4 DESC \n\n\n\n\n\n\n\n\nstate\nbikes_sold\navg_bike_price\nhighest_bike_price\n\n\n\n\n0\nPunjab\n1051\n226566.1361\n399689\n\n\n1\nMaharashtra\n1030\n220031.6515\n399253\n\n\n2\nRajasthan\n1017\n220819.9302\n399730\n\n\n3\nUttar Pradesh\n1003\n227511.1027\n399456\n\n\n4\nGujarat\n1002\n226440.6477\n399909\n\n\n5\nTamil Nadu\n994\n226715.3803\n399395\n\n\n6\nKarnataka\n982\n225220.2515\n399791\n\n\n7\nDelhi\n977\n228109.7861\n399947\n\n\n8\nMadhya Pradesh\n973\n219936.9435\n399981\n\n\n9\nWest Bengal\n971\n221925.1267\n399829\n\n\n\n\n\n\n\n\n\nWhat are the Engine Preference in CC by States ?\n\n\n%%sql \nSELECT \nstate,\nROUND(AVG(engine_capacity),0) as engine_capacity\nFROM bikes\nGROUP BY 1 \n\n\n\n\n\n\n\n\nstate\nengine_capacity\n\n\n\n\n0\nKarnataka\n552\n\n\n1\nRajasthan\n554\n\n\n2\nMadhya Pradesh\n556\n\n\n3\nMaharashtra\n559\n\n\n4\nTamil Nadu\n548\n\n\n5\nPunjab\n554\n\n\n6\nGujarat\n539\n\n\n7\nUttar Pradesh\n550\n\n\n8\nDelhi\n555\n\n\n9\nWest Bengal\n560\n\n\n\n\n\n\n\n\n\nWhat is the Brand and Models with their Average Mileage and Average Engine Capacity ?\n\n\n%%sql \nSELECT\nbrand,\nmodel,\nROUND(AVG(mileage),0) avg_mileage_kmpl,\nROUND(AVG(engine_capacity),2) avg_engine_capacity_cc,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes\nGROUP BY 1 ,2\n\n\n\n\n\n\n\n\nbrand\nmodel\navg_mileage_kmpl\navg_engine_capacity_cc\navg_price\n\n\n\n\n0\nRoyal Enfield\nHunter 350\n69.0\n579.65\n233028\n\n\n1\nBajaj\nDominar 400\n66.0\n507.56\n219955\n\n\n2\nKTM\n125 Duke\n68.0\n566.45\n222658\n\n\n3\nKawasaki\nNinja 300\n65.0\n570.05\n217552\n\n\n4\nYamaha\nFZ V3\n67.0\n538.81\n223681\n\n\n5\nHero\nSplendor Plus\n69.0\n543.76\n236058\n\n\n6\nRoyal Enfield\nMeteor 350\n67.0\n555.32\n224339\n\n\n7\nKawasaki\nVulcan S\n69.0\n553.16\n231590\n\n\n8\nKTM\n390 Adventure\n67.0\n562.12\n218125\n\n\n9\nHero\nHF Deluxe\n64.0\n548.51\n219996\n\n\n10\nTVS\nJupiter\n67.0\n540.27\n232499\n\n\n11\nKawasaki\nZ650\n68.0\n550.19\n225590\n\n\n12\nYamaha\nFascino 125\n67.0\n570.58\n232287\n\n\n13\nHero\nXtreme 160R\n69.0\n559.36\n221184\n\n\n14\nKawasaki\nVersys 650\n69.0\n565.49\n219404\n\n\n15\nHero\nGlamour\n68.0\n564.24\n232147\n\n\n16\nYamaha\nMT-15\n68.0\n556.87\n227956\n\n\n17\nHonda\nActiva\n66.0\n528.47\n230481\n\n\n18\nYamaha\nRay ZR\n67.0\n573.60\n225791\n\n\n19\nBajaj\nAvenger 220\n67.0\n556.97\n236263\n\n\n20\nHero\nPassion Pro\n67.0\n555.51\n221403\n\n\n21\nTVS\nNTorq 125\n71.0\n555.60\n217795\n\n\n22\nYamaha\nR15 V4\n66.0\n549.16\n219434\n\n\n23\nHonda\nUnicorn\n71.0\n544.38\n223242\n\n\n24\nTVS\nRonin\n67.0\n566.01\n225114\n\n\n25\nBajaj\nPlatina 110\n67.0\n557.10\n234069\n\n\n26\nBajaj\nPulsar 150\n69.0\n545.14\n233303\n\n\n27\nKTM\nDuke 200\n67.0\n537.74\n225506\n\n\n28\nHonda\nShine\n65.0\n558.97\n209989\n\n\n29\nRoyal Enfield\nClassic 350\n65.0\n567.46\n219864\n\n\n30\nHonda\nDio\n65.0\n556.07\n216609\n\n\n31\nTVS\nSport\n66.0\n544.22\n228784\n\n\n32\nKawasaki\nNinja 400\n64.0\n553.91\n221419\n\n\n33\nTVS\nApache RTR 160\n68.0\n535.49\n207949\n\n\n34\nKTM\nRC 390\n68.0\n540.78\n224213\n\n\n35\nRoyal Enfield\nInterceptor 650\n67.0\n520.73\n222950\n\n\n36\nHonda\nCBR 650R\n67.0\n560.89\n225380\n\n\n37\nBajaj\nCT 100\n68.0\n572.22\n229116\n\n\n38\nKTM\n250 Duke\n67.0\n534.99\n222431\n\n\n39\nRoyal Enfield\nHimalayan\n65.0\n553.59\n214261\n\n\n\n\n\n\n\n\n\nHow much bike model of each brand travels in each day.\n\n\n%%sql\nSELECT\nbrand,\nmodel,\nROUND(AVG(avg_daily_distance),2) daily_distance_km\nFROM bikes\nGROUP BY 1 ,2\nORDER BY 1\n\n\n\n\n\n\n\n\nbrand\nmodel\ndaily_distance_km\n\n\n\n\n0\nBajaj\nAvenger 220\n41.68\n\n\n1\nBajaj\nCT 100\n40.95\n\n\n2\nBajaj\nDominar 400\n42.28\n\n\n3\nBajaj\nPlatina 110\n41.38\n\n\n4\nBajaj\nPulsar 150\n41.94\n\n\n5\nHero\nGlamour\n42.33\n\n\n6\nHero\nHF Deluxe\n42.77\n\n\n7\nHero\nPassion Pro\n45.13\n\n\n8\nHero\nSplendor Plus\n41.87\n\n\n9\nHero\nXtreme 160R\n43.19\n\n\n10\nHonda\nActiva\n41.54\n\n\n11\nHonda\nCBR 650R\n43.24\n\n\n12\nHonda\nDio\n42.29\n\n\n13\nHonda\nShine\n42.41\n\n\n14\nHonda\nUnicorn\n43.90\n\n\n15\nKawasaki\nNinja 300\n44.55\n\n\n16\nKawasaki\nNinja 400\n41.79\n\n\n17\nKawasaki\nVersys 650\n43.25\n\n\n18\nKawasaki\nVulcan S\n40.85\n\n\n19\nKawasaki\nZ650\n43.71\n\n\n20\nKTM\n125 Duke\n41.68\n\n\n21\nKTM\n250 Duke\n40.79\n\n\n22\nKTM\n390 Adventure\n44.15\n\n\n23\nKTM\nDuke 200\n42.49\n\n\n24\nKTM\nRC 390\n40.64\n\n\n25\nRoyal Enfield\nClassic 350\n42.30\n\n\n26\nRoyal Enfield\nHimalayan\n42.84\n\n\n27\nRoyal Enfield\nHunter 350\n43.70\n\n\n28\nRoyal Enfield\nInterceptor 650\n41.83\n\n\n29\nRoyal Enfield\nMeteor 350\n45.46\n\n\n30\nTVS\nApache RTR 160\n41.11\n\n\n31\nTVS\nJupiter\n41.61\n\n\n32\nTVS\nNTorq 125\n43.31\n\n\n33\nTVS\nRonin\n42.63\n\n\n34\nTVS\nSport\n42.69\n\n\n35\nYamaha\nFascino 125\n43.30\n\n\n36\nYamaha\nFZ V3\n42.90\n\n\n37\nYamaha\nMT-15\n41.52\n\n\n38\nYamaha\nR15 V4\n43.00\n\n\n39\nYamaha\nRay ZR\n42.32\n\n\n\n\n\n\n\n\n\nWhat is the Best Performing Year Revenue Wise by each Brand ?\n\n\n%%sql\nWITH Revenue_Brand AS \n(SELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n),\nyear_ranked AS \n(SELECT \n* , \nRANK() OVER(PARTITION BY brand ORDER BY revenue_inr DESC) as ranking\nFROM Revenue_Brand\n)\nSELECT * FROM year_ranked WHERE ranking = 1\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\nranking\n\n\n\n\n0\nBajaj\n2024\n57982456.0000\n1\n\n\n1\nHero\n2024\n67174614.0000\n1\n\n\n2\nHonda\n2024\n58437509.0000\n1\n\n\n3\nKawasaki\n2024\n71845334.0000\n1\n\n\n4\nKTM\n2024\n69337919.0000\n1\n\n\n5\nRoyal Enfield\n2024\n61471090.0000\n1\n\n\n6\nTVS\n2024\n63856187.0000\n1\n\n\n7\nYamaha\n2024\n62200342.0000\n1\n\n\n\n\n\n\n\n\n\nWhat is the Revenue of each Brand per Year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\n\n\n\n\n0\nBajaj\n2015\n12705702.0000\n\n\n1\nBajaj\n2016\n13691874.0000\n\n\n2\nBajaj\n2017\n19455306.0000\n\n\n3\nBajaj\n2018\n21464659.0000\n\n\n4\nBajaj\n2019\n21280809.0000\n\n\n5\nBajaj\n2020\n24776346.0000\n\n\n6\nBajaj\n2021\n26770708.0000\n\n\n7\nBajaj\n2022\n34429187.0000\n\n\n8\nBajaj\n2023\n45853229.0000\n\n\n9\nBajaj\n2024\n57982456.0000\n\n\n10\nHero\n2015\n11773585.0000\n\n\n11\nHero\n2016\n14051936.0000\n\n\n12\nHero\n2017\n15159928.0000\n\n\n13\nHero\n2018\n14248666.0000\n\n\n14\nHero\n2019\n22453875.0000\n\n\n15\nHero\n2020\n23358010.0000\n\n\n16\nHero\n2021\n25269434.0000\n\n\n17\nHero\n2022\n38528366.0000\n\n\n18\nHero\n2023\n47997131.0000\n\n\n19\nHero\n2024\n67174614.0000\n\n\n20\nHonda\n2015\n10835149.0000\n\n\n21\nHonda\n2016\n13074250.0000\n\n\n22\nHonda\n2017\n15891562.0000\n\n\n23\nHonda\n2018\n16161945.0000\n\n\n24\nHonda\n2019\n23517179.0000\n\n\n25\nHonda\n2020\n25580464.0000\n\n\n26\nHonda\n2021\n29066031.0000\n\n\n27\nHonda\n2022\n34340051.0000\n\n\n28\nHonda\n2023\n43030583.0000\n\n\n29\nHonda\n2024\n58437509.0000\n\n\n30\nKawasaki\n2015\n15668191.0000\n\n\n31\nKawasaki\n2016\n9604010.0000\n\n\n32\nKawasaki\n2017\n17227399.0000\n\n\n33\nKawasaki\n2018\n16687188.0000\n\n\n34\nKawasaki\n2019\n24235410.0000\n\n\n35\nKawasaki\n2020\n25094472.0000\n\n\n36\nKawasaki\n2021\n30160213.0000\n\n\n37\nKawasaki\n2022\n35094953.0000\n\n\n38\nKawasaki\n2023\n42485748.0000\n\n\n39\nKawasaki\n2024\n71845334.0000\n\n\n40\nKTM\n2015\n9670746.0000\n\n\n41\nKTM\n2016\n13439731.0000\n\n\n42\nKTM\n2017\n14079433.0000\n\n\n43\nKTM\n2018\n20744460.0000\n\n\n44\nKTM\n2019\n24247508.0000\n\n\n45\nKTM\n2020\n25642272.0000\n\n\n46\nKTM\n2021\n27039079.0000\n\n\n47\nKTM\n2022\n34301426.0000\n\n\n48\nKTM\n2023\n44660548.0000\n\n\n49\nKTM\n2024\n69337919.0000\n\n\n50\nRoyal Enfield\n2015\n13021717.0000\n\n\n51\nRoyal Enfield\n2016\n14216805.0000\n\n\n52\nRoyal Enfield\n2017\n18166570.0000\n\n\n53\nRoyal Enfield\n2018\n18423327.0000\n\n\n54\nRoyal Enfield\n2019\n15885920.0000\n\n\n55\nRoyal Enfield\n2020\n20678910.0000\n\n\n56\nRoyal Enfield\n2021\n33558439.0000\n\n\n57\nRoyal Enfield\n2022\n34743002.0000\n\n\n58\nRoyal Enfield\n2023\n49110568.0000\n\n\n59\nRoyal Enfield\n2024\n61471090.0000\n\n\n60\nTVS\n2015\n11494553.0000\n\n\n61\nTVS\n2016\n17448136.0000\n\n\n62\nTVS\n2017\n18445540.0000\n\n\n63\nTVS\n2018\n15096315.0000\n\n\n64\nTVS\n2019\n22996130.0000\n\n\n65\nTVS\n2020\n22266686.0000\n\n\n66\nTVS\n2021\n26270255.0000\n\n\n67\nTVS\n2022\n34431906.0000\n\n\n68\nTVS\n2023\n42220926.0000\n\n\n69\nTVS\n2024\n63856187.0000\n\n\n70\nYamaha\n2015\n12525661.0000\n\n\n71\nYamaha\n2016\n13610480.0000\n\n\n72\nYamaha\n2017\n17534159.0000\n\n\n73\nYamaha\n2018\n18385285.0000\n\n\n74\nYamaha\n2019\n24000188.0000\n\n\n75\nYamaha\n2020\n25209581.0000\n\n\n76\nYamaha\n2021\n30673557.0000\n\n\n77\nYamaha\n2022\n37112687.0000\n\n\n78\nYamaha\n2023\n48605718.0000\n\n\n79\nYamaha\n2024\n62200342.0000\n\n\n\n\n\n\n\n\n\nWhat are the Units Sold by Each Brands each year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) units\nFROM bikes\nGROUP BY 1 ,2 \nORDER BY 1,2 DESC\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nunits\n\n\n\n\n0\nBajaj\n2024\n255\n\n\n1\nBajaj\n2023\n211\n\n\n2\nBajaj\n2022\n145\n\n\n3\nBajaj\n2021\n117\n\n\n4\nBajaj\n2020\n101\n\n\n5\nBajaj\n2019\n94\n\n\n6\nBajaj\n2018\n93\n\n\n7\nBajaj\n2017\n78\n\n\n8\nBajaj\n2016\n59\n\n\n9\nBajaj\n2015\n54\n\n\n10\nHero\n2024\n299\n\n\n11\nHero\n2023\n216\n\n\n12\nHero\n2022\n169\n\n\n13\nHero\n2021\n112\n\n\n14\nHero\n2020\n105\n\n\n15\nHero\n2019\n97\n\n\n16\nHero\n2018\n59\n\n\n17\nHero\n2017\n65\n\n\n18\nHero\n2016\n64\n\n\n19\nHero\n2015\n53\n\n\n20\nHonda\n2024\n266\n\n\n21\nHonda\n2023\n196\n\n\n22\nHonda\n2022\n161\n\n\n23\nHonda\n2021\n125\n\n\n24\nHonda\n2020\n120\n\n\n25\nHonda\n2019\n94\n\n\n26\nHonda\n2018\n72\n\n\n27\nHonda\n2017\n75\n\n\n28\nHonda\n2016\n62\n\n\n29\nHonda\n2015\n50\n\n\n30\nKawasaki\n2024\n323\n\n\n31\nKawasaki\n2023\n196\n\n\n32\nKawasaki\n2022\n161\n\n\n33\nKawasaki\n2021\n139\n\n\n34\nKawasaki\n2020\n112\n\n\n35\nKawasaki\n2019\n99\n\n\n36\nKawasaki\n2018\n72\n\n\n37\nKawasaki\n2017\n75\n\n\n38\nKawasaki\n2016\n47\n\n\n39\nKawasaki\n2015\n67\n\n\n40\nKTM\n2024\n307\n\n\n41\nKTM\n2023\n192\n\n\n42\nKTM\n2022\n153\n\n\n43\nKTM\n2021\n123\n\n\n44\nKTM\n2020\n111\n\n\n45\nKTM\n2019\n116\n\n\n46\nKTM\n2018\n93\n\n\n47\nKTM\n2017\n70\n\n\n48\nKTM\n2016\n60\n\n\n49\nKTM\n2015\n47\n\n\n50\nRoyal Enfield\n2024\n279\n\n\n51\nRoyal Enfield\n2023\n216\n\n\n52\nRoyal Enfield\n2022\n152\n\n\n53\nRoyal Enfield\n2021\n150\n\n\n54\nRoyal Enfield\n2020\n101\n\n\n55\nRoyal Enfield\n2019\n78\n\n\n56\nRoyal Enfield\n2018\n77\n\n\n57\nRoyal Enfield\n2017\n78\n\n\n58\nRoyal Enfield\n2016\n63\n\n\n59\nRoyal Enfield\n2015\n59\n\n\n60\nTVS\n2024\n285\n\n\n61\nTVS\n2023\n192\n\n\n62\nTVS\n2022\n160\n\n\n63\nTVS\n2021\n120\n\n\n64\nTVS\n2020\n92\n\n\n65\nTVS\n2019\n109\n\n\n66\nTVS\n2018\n72\n\n\n67\nTVS\n2017\n79\n\n\n68\nTVS\n2016\n73\n\n\n69\nTVS\n2015\n52\n\n\n70\nYamaha\n2024\n282\n\n\n71\nYamaha\n2023\n209\n\n\n72\nYamaha\n2022\n164\n\n\n73\nYamaha\n2021\n133\n\n\n74\nYamaha\n2020\n114\n\n\n75\nYamaha\n2019\n107\n\n\n76\nYamaha\n2018\n81\n\n\n77\nYamaha\n2017\n76\n\n\n78\nYamaha\n2016\n61\n\n\n79\nYamaha\n2015\n56\n\n\n\n\n\n\n\n\n\nHow many new units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type = 'First'\nGROUP BY 1\n\n\n\n\n\n\n\n\nbrand\nunits\n\n\n\n\n0\nHero\n411\n\n\n1\nRoyal Enfield\n419\n\n\n2\nTVS\n414\n\n\n3\nKawasaki\n457\n\n\n4\nYamaha\n458\n\n\n5\nBajaj\n415\n\n\n6\nHonda\n405\n\n\n7\nKTM\n428\n\n\n\n\n\n\n\n\n\nHow many old units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type &lt;&gt; 'First'\nGROUP BY 1\n\n\n\n\n\n\n\n\nbrand\nunits\n\n\n\n\n0\nRoyal Enfield\n834\n\n\n1\nBajaj\n792\n\n\n2\nKTM\n844\n\n\n3\nKawasaki\n834\n\n\n4\nYamaha\n825\n\n\n5\nHero\n828\n\n\n6\nHonda\n816\n\n\n7\nTVS\n820\n\n\n\n\n\n\n\n\n\nFindings & Business Recommendations\n\nMarket Leaders: Brands like Royal Enfield and Bajaj dominate the market with a high number of models.\nCustomer Preferences: Most buyers prefer bikes with an engine capacity between 100-250cc due to affordability and fuel efficiency.\nPremium Segment: High-end bikes (above 500cc) are priced significantly higher but offer superior power and performance.\nBest Value: Some mid-range bikes provide excellent power-to-price ratios, making them ideal choices for performance-focused consumers.\n\n\n\nConclusion\nThis project demonstrates the power of SQL in extracting meaningful business insights from raw data. The analysis helps stakeholders understand customer preferences, market trends, and pricing strategies in the Indian motorcycle industry."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Karandeep Singh",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Ola July Report",
    "section": "",
    "text": "This project analyzes the Ola rides dataset for the month of July, containing 100,000 rows of data. The analysis focuses on key metrics such as revenue, cancellation rate, and ratings. The insights are visualized using Power BI to provide an intuitive and interactive report.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\ndf = pd.read_excel('Ola_Data.xlsx', sheet_name='July')\ndf.head()\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-26 14:00:00\n14:00:00\nCNR7153255142\nCanceled by Driver\nCID713523\nPrime Sedan\nTumkur Road\nRT Nagar\nNaN\nNaN\nNaN\nPersonal & Car related issue\nNaN\nNaN\n444\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n1\n2024-07-25 22:20:00\n22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNaN\nNaN\nNo\nNaN\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-30 19:59:00\n19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNaN\nNaN\nNo\nNaN\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n3\n2024-07-22 03:15:00\n03:15:00\nCNR2395710036\nCanceled by Customer\nCID581320\neBike\nHSR Layout\nVijayanagar\nNaN\nNaN\nDriver is not moving towards pickup location\nNaN\nNaN\nNaN\n384\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n4\n2024-07-02 09:02:00\n09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNaN\nNaN\nNo\nNaN\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n\n\n\n\n\n\ndf.info(),df.drop_duplicates(inplace=True),\ndf['Canceled_Rides_by_Driver'].value_counts(),df['Vehicle_Type'].value_counts(),df['Payment_Method'].value_counts(),df['Booking_Status'].value_counts() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 103024 entries, 0 to 103023\nData columns (total 20 columns):\n #   Column                      Non-Null Count   Dtype         \n---  ------                      --------------   -----         \n 0   Date                        103024 non-null  datetime64[ns]\n 1   Time                        103024 non-null  object        \n 2   Booking_ID                  103024 non-null  object        \n 3   Booking_Status              103024 non-null  object        \n 4   Customer_ID                 103024 non-null  object        \n 5   Vehicle_Type                103024 non-null  object        \n 6   Pickup_Location             103024 non-null  object        \n 7   Drop_Location               103024 non-null  object        \n 8   V_TAT                       63967 non-null   float64       \n 9   C_TAT                       63967 non-null   float64       \n 10  Canceled_Rides_by_Customer  10499 non-null   object        \n 11  Canceled_Rides_by_Driver    18434 non-null   object        \n 12  Incomplete_Rides            63967 non-null   object        \n 13  Incomplete_Rides_Reason     3926 non-null    object        \n 14  Booking_Value               103024 non-null  int64         \n 15  Payment_Method              63967 non-null   object        \n 16  Ride_Distance               103024 non-null  int64         \n 17  Driver_Ratings              63967 non-null   float64       \n 18  Customer_Rating             63967 non-null   float64       \n 19  Vehicle Images              103024 non-null  object        \ndtypes: datetime64[ns](1), float64(4), int64(2), object(13)\nmemory usage: 15.7+ MB\n\n\n(Canceled_Rides_by_Driver\n Personal & Car related issue           6542\n Customer related issue                 5413\n Customer was coughing/sick             3654\n More than permitted people in there    2825\n Name: count, dtype: int64,\n Vehicle_Type\n Prime Sedan    14877\n eBike          14816\n Auto           14755\n Prime Plus     14707\n Bike           14662\n Prime SUV      14655\n Mini           14552\n Name: count, dtype: int64,\n Payment_Method\n Cash           35022\n UPI            25881\n Credit Card     2435\n Debit Card       629\n Name: count, dtype: int64,\n Booking_Status\n Success                 63967\n Canceled by Driver      18434\n Canceled by Customer    10499\n Driver Not Found        10124\n Name: count, dtype: int64)\n\n\n\n\n\n\nfrom sqlalchemy import create_engine as ce\nsql_eng  = ce('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = sql_eng.connect()\n\n\ndf_to_sql = df.to_sql('ola_july', con=conn, if_exists='replace', index=False)\n\n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\n\n\n\nRetrieve all successful bookings\n\n\n%%sql \nSELECT * FROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-25 22:20:00\n0 days 22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNone\nNone\nNo\nNone\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-02 09:02:00\n0 days 09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNone\nNone\nNo\nNone\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n3\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n4\n2024-07-23 09:51:00\n0 days 09:51:00\nCNR3612067560\nSuccess\nCID476071\nBike\nTumkur Road\nWhitefield\n133.0\n40.0\nNone\nNone\nNo\nNone\n140\nCash\n49\n3.2\n4.5\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n63962\n2024-07-31 09:06:00\n0 days 09:06:00\nCNR9488489435\nSuccess\nCID371654\nPrime Plus\nRichmond Town\nVarthur\n245.0\n35.0\nNone\nNone\nNo\nNone\n111\nCash\n41\n3.6\n3.8\nhttps://cdn-icons-png.flaticon.com/128/11409/1...\n\n\n63963\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n63964\n2024-07-31 13:59:00\n0 days 13:59:00\nCNR1286151233\nSuccess\nCID113188\nPrime SUV\nBannerghatta Road\nJP Nagar\n35.0\n75.0\nNone\nNone\nNo\nNone\n2201\nCash\n37\n3.6\n3.2\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n63965\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n63966\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n63967 rows × 20 columns\n\n\n\n\n\nWhat is the average ride distance for each vehicle type?\n\n\n%%sql\nSELECT\nVehicle_Type,\nAVG(Ride_Distance) AS avg_dist\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_dist\n\n\n\n\n0\nPrime Sedan\n15.7649\n\n\n1\nBike\n15.5331\n\n\n2\nPrime SUV\n15.2745\n\n\n3\neBike\n15.5806\n\n\n4\nMini\n15.5101\n\n\n5\nPrime Plus\n15.4475\n\n\n6\nAuto\n6.2381\n\n\n\n\n\n\n\n\n\nWhat is the total number of cancelled rides by customers?\n\n\n%%sql \nSELECT \nCOUNT(Canceled_Rides_by_Customer) cnt\nFROM \nola_july;\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n10499\n\n\n\n\n\n\n\n\n\nWhat are the top 5 customers who booked the highest number of rides?\n\n\n%%sql\nSELECT \nCustomer_ID,\nCOUNT(Booking_ID)\nFROM ola_july\nGROUP BY Customer_ID\nORDER BY COUNT(Booking_ID) DESC\nLIMIT 5 ;\n\n\n\n\n\n\n\n\nCustomer_ID\nCOUNT(Booking_ID)\n\n\n\n\n0\nCID954071\n5\n\n\n1\nCID539191\n4\n\n\n2\nCID189965\n4\n\n\n3\nCID268274\n4\n\n\n4\nCID952434\n4\n\n\n\n\n\n\n\n\n\nWhat is the number of rides cancelled by drivers due to personal and car-related issues?\n\n\n%%sql\nSELECT \nCOUNT(*) AS cnt\nFROM ola_july\nWHERE Canceled_Rides_by_Driver = 'Personal & Car related issue';\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n6542\n\n\n\n\n\n\n\n\n\nWhat is the maximum and minimum driver ratings for Prime Sedan bookings?\n\n\n%%sql\nSELECT \nMAX(Driver_Ratings) AS max,\nMIN(Driver_Ratings) AS min\nFROM ola_july\nWHERE Vehicle_Type = 'Prime Sedan';\n\n\n\n\n\n\n\n\nmax\nmin\n\n\n\n\n0\n5.0\n3.0\n\n\n\n\n\n\n\n\n\nAll rides where payment was made using UPI.\n\n\n%%sql\nSELECT *\nFROM ola_july\nWHERE Payment_Method = 'UPI' ;\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n2\n2024-07-27 13:18:00\n0 days 13:18:00\nCNR4524472111\nSuccess\nCID540929\nAuto\nCox Town\nYelahanka\n126.0\n35.0\nNone\nNone\nNo\nNone\n330\nUPI\n8\n3.0\n4.8\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n3\n2024-07-16 09:54:00\n0 days 09:54:00\nCNR8181602032\nSuccess\nCID167642\nBike\nIndiranagar\nMG Road\n70.0\n95.0\nNone\nNone\nNo\nNone\n378\nUPI\n18\n4.8\n4.1\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n4\n2024-07-02 10:25:00\n0 days 10:25:00\nCNR8090918544\nSuccess\nCID640151\nBike\nMagadi Road\nHSR Layout\n126.0\n95.0\nNone\nNone\nNo\nNone\n343\nUPI\n23\n3.7\n3.6\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25876\n2024-07-31 19:34:00\n0 days 19:34:00\nCNR4870774895\nSuccess\nCID266336\nPrime Sedan\nMarathahalli\nCox Town\n189.0\n30.0\nNone\nNone\nNo\nNone\n280\nUPI\n38\n3.4\n4.1\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n25877\n2024-07-31 03:00:00\n0 days 03:00:00\nCNR9738039746\nSuccess\nCID922711\neBike\nChickpet\nRT Nagar\n42.0\n135.0\nNone\nNone\nNo\nNone\n310\nUPI\n7\n3.8\n3.3\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25878\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n25879\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25880\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n25881 rows × 20 columns\n\n\n\n\n\nWhat is the average customer rating per vehicle type?\n\n\n%%sql\nSELECT \nVehicle_Type,\nROUND(AVG(Customer_Rating),2) AS avg_rating\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_rating\n\n\n\n\n0\nPrime Sedan\n4.00\n\n\n1\nBike\n3.99\n\n\n2\nPrime SUV\n4.00\n\n\n3\neBike\n3.99\n\n\n4\nMini\n4.00\n\n\n5\nPrime Plus\n4.01\n\n\n6\nAuto\n4.00\n\n\n\n\n\n\n\n\n\nWhat is the total booking value of rides completed successfully?\n\n\n%%sql \nSELECT \nSUM(Booking_Value) AS total_booking_val\nFROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\ntotal_booking_val\n\n\n\n\n0\n35080467\n\n\n\n\n\n\n\n\n\nAll incomplete rides along with the reason.\n\n\n%%sql \nSELECT \nCustomer_ID,\nBooking_ID,\nIncomplete_Rides_Reason\nFROM ola_july\nWHERE Incomplete_Rides = 'Yes';\n\n\n\n\n\n\n\n\nCustomer_ID\nBooking_ID\nIncomplete_Rides_Reason\n\n\n\n\n0\nCID296026\nCNR5176704322\nCustomer Demand\n\n\n1\nCID649563\nCNR9312632867\nVehicle Breakdown\n\n\n2\nCID517661\nCNR7924302885\nCustomer Demand\n\n\n3\nCID190281\nCNR1640228587\nOther Issue\n\n\n4\nCID526261\nCNR7623690602\nOther Issue\n\n\n...\n...\n...\n...\n\n\n3921\nCID118412\nCNR5546265534\nCustomer Demand\n\n\n3922\nCID771129\nCNR1954831907\nVehicle Breakdown\n\n\n3923\nCID112738\nCNR1271821250\nVehicle Breakdown\n\n\n3924\nCID382466\nCNR4652634649\nVehicle Breakdown\n\n\n3925\nCID406104\nCNR5427755403\nOther Issue\n\n\n\n\n3926 rows × 3 columns\n\n\n\nDownload the Power BI Dashboard"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Customer Shopping Behaviour Analysis\n\n\nMarket Analysis\n\n\n\nKarandeep Singh\n\n\nMar 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nIndian Bikes Market Analysis\n\n\nMarket Analysis\n\n\n\nKarandeep Singh\n\n\nMar 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOla July Report\n\n\nSales Reporting\n\n\n\nKarandeep Singh\n\n\nMar 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nApple Sales & Warranty Analysis\n\n\nSales & Warranty Analysis\n\n\n\nKarandeep Singh\n\n\nMar 3, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/main.html",
    "href": "posts/post-with-code/main.html",
    "title": "Indian Bikes Market Analysis",
    "section": "",
    "text": "Importing Neccessary Libraries\n\nimport kaggle as k \nimport pandas as pd \nimport kagglehub\nimport seaborn as sns \n\n\n\nDownloading the Dataset\n\nkagglehub.dataset_download(\"ak0212/indian-bike-sales-dataset\")\n\n\n\nBasic EDA\n\nbikes = pd.read_csv('bike_sales_india.csv')\nbikes.head()\n\n\n\n\n\n\n\n\nState\nAvg Daily Distance (km)\nBrand\nModel\nPrice (INR)\nYear of Manufacture\nEngine Capacity (cc)\nFuel Type\nMileage (km/l)\nOwner Type\nRegistration Year\nInsurance Status\nSeller Type\nResale Price (INR)\nCity Tier\n\n\n\n\n0\nKarnataka\n68.84\nRoyal Enfield\nHunter 350\n252816\n2021\n672\nElectric\n78.41\nSecond\n2024\nActive\nIndividual\n149934.18\nTier 3\n\n\n1\nRajasthan\n23.80\nBajaj\nDominar 400\n131100\n2020\n769\nHybrid\n89.98\nThird\n2023\nActive\nIndividual\n66960.30\nTier 3\n\n\n2\nMadhya Pradesh\n27.67\nKTM\n125 Duke\n201016\n2020\n216\nHybrid\n71.46\nSecond\n2023\nActive\nDealer\n141522.64\nTier 3\n\n\n3\nKarnataka\n62.85\nKawasaki\nNinja 300\n132482\n2021\n556\nPetrol\n51.73\nThird\n2021\nActive\nDealer\n56057.22\nTier 1\n\n\n4\nMadhya Pradesh\n10.62\nYamaha\nFZ V3\n231796\n2019\n298\nPetrol\n54.72\nThird\n2019\nNot Available\nIndividual\n132538.36\nTier 3\n\n\n\n\n\n\n\n\nbikes.info(), bikes.describe(), bikes.isnull().sum() # no missing values\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 15 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   State                    10000 non-null  object \n 1   Avg Daily Distance (km)  10000 non-null  float64\n 2   Brand                    10000 non-null  object \n 3   Model                    10000 non-null  object \n 4   Price (INR)              10000 non-null  int64  \n 5   Year of Manufacture      10000 non-null  int64  \n 6   Engine Capacity (cc)     10000 non-null  int64  \n 7   Fuel Type                10000 non-null  object \n 8   Mileage (km/l)           10000 non-null  float64\n 9   Owner Type               10000 non-null  object \n 10  Registration Year        10000 non-null  int64  \n 11  Insurance Status         10000 non-null  object \n 12  Seller Type              10000 non-null  object \n 13  Resale Price (INR)       10000 non-null  float64\n 14  City Tier                10000 non-null  object \ndtypes: float64(3), int64(4), object(8)\nmemory usage: 1.1+ MB\n\n\n(None,\n        Avg Daily Distance (km)    Price (INR)  Year of Manufacture  \\\n count             10000.000000   10000.000000         10000.000000   \n mean                 42.533128  224328.722400          2019.510500   \n std                  21.676985  100753.660447             2.907668   \n min                   5.010000   50031.000000          2015.000000   \n 25%                  23.907500  137900.250000          2017.000000   \n 50%                  42.480000  223878.000000          2019.000000   \n 75%                  61.352500  311464.250000          2022.000000   \n max                  80.000000  399981.000000          2024.000000   \n \n        Engine Capacity (cc)  Mileage (km/l)  Registration Year  \\\n count          10000.000000    10000.000000        10000.00000   \n mean             552.695300       67.188926         2020.96510   \n std              261.176292       20.891728            2.74897   \n min              100.000000       25.000000         2015.00000   \n 25%              327.000000       50.680000         2019.00000   \n 50%              553.000000       69.850000         2022.00000   \n 75%              780.000000       84.542500         2023.00000   \n max             1000.000000      100.000000         2024.00000   \n \n        Resale Price (INR)  \n count        10000.000000  \n mean        133828.973998  \n std          66613.220382  \n min          20532.070000  \n 25%          78680.905000  \n 50%         128148.340000  \n 75%         181048.192500  \n max         317302.450000  ,\n State                      0\n Avg Daily Distance (km)    0\n Brand                      0\n Model                      0\n Price (INR)                0\n Year of Manufacture        0\n Engine Capacity (cc)       0\n Fuel Type                  0\n Mileage (km/l)             0\n Owner Type                 0\n Registration Year          0\n Insurance Status           0\n Seller Type                0\n Resale Price (INR)         0\n City Tier                  0\n dtype: int64)\n\n\n\n\nData Preprocessing\n\nbikes.columns = bikes.columns.str.lower().str.replace(' ', '_')\nbikes.columns\n\nIndex(['state', 'avg_daily_distance_(km)', 'brand', 'model', 'price_(inr)',\n       'year_of_manufacture', 'engine_capacity_(cc)', 'fuel_type',\n       'mileage_(km/l)', 'owner_type', 'registration_year', 'insurance_status',\n       'seller_type', 'resale_price_(inr)', 'city_tier'],\n      dtype='object')\n\n\n\nbikes.rename(columns={'avg_daily_distance_(km)':'avg_daily_distance','price_(inr)':'price_inr','resale_price_(inr)':'resale_price_inr'},inplace=True)\n\n\nbikes.rename(columns={'mileage_(km/l)':'mileage','engine_capacity_(cc)':'engine_capacity'},inplace=True)\n\n\n\nConnecting to Database\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\n\n\nbikes.to_sql('bikes',con=conn,if_exists='replace',index=False) \n\n10000\n\n\n\n%load_ext sql \n\n\n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n\n\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n\nAnalysis (SQL Queries)\n\n\nWhat are the top-selling bike brands and models\n\n\n%%sql\nSELECT \nbrand,\nmodel,\nCOUNT(*) AS units_sold\nFROM bikes\nGROUP BY 1,2\nORDER BY 1 , 2 , 3 DESC;\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\nunits_sold\n\n\n\n\nBajaj\nAvenger 220\n249\n\n\nBajaj\nCT 100\n236\n\n\nBajaj\nDominar 400\n233\n\n\nBajaj\nPlatina 110\n228\n\n\nBajaj\nPulsar 150\n261\n\n\nHero\nGlamour\n258\n\n\nHero\nHF Deluxe\n257\n\n\nHero\nPassion Pro\n247\n\n\nHero\nSplendor Plus\n228\n\n\nHero\nXtreme 160R\n249\n\n\nHonda\nActiva\n230\n\n\nHonda\nCBR 650R\n248\n\n\nHonda\nDio\n242\n\n\nHonda\nShine\n244\n\n\nHonda\nUnicorn\n257\n\n\nKawasaki\nNinja 300\n256\n\n\nKawasaki\nNinja 400\n255\n\n\nKawasaki\nVersys 650\n261\n\n\nKawasaki\nVulcan S\n267\n\n\nKawasaki\nZ650\n252\n\n\nKTM\n125 Duke\n231\n\n\nKTM\n250 Duke\n269\n\n\nKTM\n390 Adventure\n254\n\n\nKTM\nDuke 200\n270\n\n\nKTM\nRC 390\n248\n\n\nRoyal Enfield\nClassic 350\n267\n\n\nRoyal Enfield\nHimalayan\n249\n\n\nRoyal Enfield\nHunter 350\n259\n\n\nRoyal Enfield\nInterceptor 650\n264\n\n\nRoyal Enfield\nMeteor 350\n214\n\n\nTVS\nApache RTR 160\n227\n\n\nTVS\nJupiter\n226\n\n\nTVS\nNTorq 125\n271\n\n\nTVS\nRonin\n252\n\n\nTVS\nSport\n258\n\n\nYamaha\nFascino 125\n248\n\n\nYamaha\nFZ V3\n256\n\n\nYamaha\nMT-15\n267\n\n\nYamaha\nR15 V4\n233\n\n\nYamaha\nRay ZR\n279\n\n\n\n\n\n\n\nWhat are the Brands Average Price(INR)\n\n\n%%sql \nSELECT \nbrand,\nmodel,\nROUND(AVG(price_inr),2) avg_price\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2,3 DESC;\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\navg_price\n\n\n\n\nBajaj\nAvenger 220\n236263.02\n\n\nBajaj\nCT 100\n229116.17\n\n\nBajaj\nDominar 400\n219954.57\n\n\nBajaj\nPlatina 110\n234069.37\n\n\nBajaj\nPulsar 150\n233303.21\n\n\nHero\nGlamour\n232147.26\n\n\nHero\nHF Deluxe\n219995.73\n\n\nHero\nPassion Pro\n221403.27\n\n\nHero\nSplendor Plus\n236058.32\n\n\nHero\nXtreme 160R\n221183.70\n\n\nHonda\nActiva\n230481.32\n\n\nHonda\nCBR 650R\n225379.57\n\n\nHonda\nDio\n216609.00\n\n\nHonda\nShine\n209988.51\n\n\nHonda\nUnicorn\n223242.46\n\n\nKawasaki\nNinja 300\n217552.12\n\n\nKawasaki\nNinja 400\n221419.33\n\n\nKawasaki\nVersys 650\n219403.90\n\n\nKawasaki\nVulcan S\n231590.10\n\n\nKawasaki\nZ650\n225589.97\n\n\nKTM\n125 Duke\n222657.63\n\n\nKTM\n250 Duke\n222430.67\n\n\nKTM\n390 Adventure\n218125.41\n\n\nKTM\nDuke 200\n225506.46\n\n\nKTM\nRC 390\n224212.75\n\n\nRoyal Enfield\nClassic 350\n219863.67\n\n\nRoyal Enfield\nHimalayan\n214261.30\n\n\nRoyal Enfield\nHunter 350\n233027.69\n\n\nRoyal Enfield\nInterceptor 650\n222950.28\n\n\nRoyal Enfield\nMeteor 350\n224339.43\n\n\nTVS\nApache RTR 160\n207949.01\n\n\nTVS\nJupiter\n232499.19\n\n\nTVS\nNTorq 125\n217794.60\n\n\nTVS\nRonin\n225114.23\n\n\nTVS\nSport\n228783.99\n\n\nYamaha\nFascino 125\n232287.48\n\n\nYamaha\nFZ V3\n223681.22\n\n\nYamaha\nMT-15\n227956.19\n\n\nYamaha\nR15 V4\n219433.70\n\n\nYamaha\nRay ZR\n225790.74\n\n\n\n\n\n\n\nWhat are the Fuel Types People Prefer the most with Average Price.\n\n\n%%sql \nSELECT \nfuel_type,\nCOUNT(*) count,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes \nGROUP BY 1\nORDER BY 2 DESC\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n3 rows affected.\n\n\n\n\n\nfuel_type\ncount\navg_price\n\n\n\n\nHybrid\n3360\n225654\n\n\nPetrol\n3357\n223561\n\n\nElectric\n3283\n223757\n\n\n\n\n\n\n\nStates With Their Price Segment Preference\n\n\n%%sql\nSELECT \nstate,\nCASE\n    WHEN price_inr BETWEEN 50000 AND 100000 THEN 'Cheap'\n    WHEN price_inr BETWEEN 100000 AND 200000 THEN 'Expensive'\n    ELSE 'Premium'\nEND AS price_category,\nCOUNT(*) units_sold\nFROM bikes\nGROUP BY 1,2 \nORDER BY 1 \n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n30 rows affected.\n\n\n\n\n\nstate\nprice_category\nunits_sold\n\n\n\n\nDelhi\nCheap\n147\n\n\nDelhi\nExpensive\n262\n\n\nDelhi\nPremium\n568\n\n\nGujarat\nCheap\n135\n\n\nGujarat\nExpensive\n279\n\n\nGujarat\nPremium\n588\n\n\nKarnataka\nCheap\n139\n\n\nKarnataka\nExpensive\n272\n\n\nKarnataka\nPremium\n571\n\n\nMadhya Pradesh\nCheap\n131\n\n\nMadhya Pradesh\nExpensive\n319\n\n\nMadhya Pradesh\nPremium\n523\n\n\nMaharashtra\nCheap\n139\n\n\nMaharashtra\nExpensive\n311\n\n\nMaharashtra\nPremium\n580\n\n\nPunjab\nCheap\n142\n\n\nPunjab\nExpensive\n306\n\n\nPunjab\nPremium\n603\n\n\nRajasthan\nCheap\n151\n\n\nRajasthan\nExpensive\n313\n\n\nRajasthan\nPremium\n553\n\n\nTamil Nadu\nCheap\n146\n\n\nTamil Nadu\nExpensive\n260\n\n\nTamil Nadu\nPremium\n588\n\n\nUttar Pradesh\nCheap\n134\n\n\nUttar Pradesh\nExpensive\n290\n\n\nUttar Pradesh\nPremium\n579\n\n\nWest Bengal\nCheap\n146\n\n\nWest Bengal\nExpensive\n274\n\n\nWest Bengal\nPremium\n551\n\n\n\n\n\n\n\nWhat is the Depriciation Percentage of Bikes in City Tiers?\n\n\n%%sql \nWITH tier_price AS\n(SELECT \ncity_tier,\nROUND(AVG(price_inr),0) avg_bike_price,\nROUND(AVG(resale_price_inr),0) avg_bike_resale_price\nFROM bikes\nGROUP BY 1 \nORDER BY 1\n)\nSELECT \n*,\nROUND(((avg_bike_price-avg_bike_resale_price)/avg_bike_price) * 100,2) AS depreciation_percentage\nFROM tier_price\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n4 rows affected.\n\n\n\n\n\ncity_tier\navg_bike_price\navg_bike_resale_price\ndepreciation_percentage\n\n\n\n\nMetro\n224238\n133491.0\n40.47\n\n\nTier 1\n224701\n133587.0\n40.55\n\n\nTier 2\n223199\n133443.0\n40.21\n\n\nTier 3\n225144\n134739.0\n40.15\n\n\n\n\n\n\n\nWho is selling bikes and their average selling price.\n\n\n%%sql \nSELECT \nseller_type,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n2 rows affected.\n\n\n\n\n\nseller_type\navg_selling_price\n\n\n\n\nIndividual\n132875.0\n\n\nDealer\n134770.0\n\n\n\n\n\n\n\n%%sql \n\n\n%%sql \n\n\n%%sql \n\n\n%%sql"
  },
  {
    "objectID": "posts/post-with-code/index.html#project-overview",
    "href": "posts/post-with-code/index.html#project-overview",
    "title": "Indian Bikes Market Analysis",
    "section": "",
    "text": "This project analyzes the Indian bikes dataset using Python and SQL queries to extract valuable business insights. The dataset includes information on various motorcycle brands, models, engine specifications, pricing, and other key attributes. The analysis focuses on answering critical business questions related to sales trends, popular brands, engine capacities, and pricing distributions.\n\n\n\nimport kaggle as k \nimport pandas as pd \nimport kagglehub\nimport seaborn as sns \n\n\n\n\n\nkagglehub.dataset_download(\"ak0212/indian-bike-sales-dataset\")\n\n\n\n\n\nbikes = pd.read_csv('bike_sales_india.csv')\nbikes.head()\n\n\n\n\n\n\n\n\nState\nAvg Daily Distance (km)\nBrand\nModel\nPrice (INR)\nYear of Manufacture\nEngine Capacity (cc)\nFuel Type\nMileage (km/l)\nOwner Type\nRegistration Year\nInsurance Status\nSeller Type\nResale Price (INR)\nCity Tier\n\n\n\n\n0\nKarnataka\n68.84\nRoyal Enfield\nHunter 350\n252816\n2021\n672\nElectric\n78.41\nSecond\n2024\nActive\nIndividual\n149934.18\nTier 3\n\n\n1\nRajasthan\n23.80\nBajaj\nDominar 400\n131100\n2020\n769\nHybrid\n89.98\nThird\n2023\nActive\nIndividual\n66960.30\nTier 3\n\n\n2\nMadhya Pradesh\n27.67\nKTM\n125 Duke\n201016\n2020\n216\nHybrid\n71.46\nSecond\n2023\nActive\nDealer\n141522.64\nTier 3\n\n\n3\nKarnataka\n62.85\nKawasaki\nNinja 300\n132482\n2021\n556\nPetrol\n51.73\nThird\n2021\nActive\nDealer\n56057.22\nTier 1\n\n\n4\nMadhya Pradesh\n10.62\nYamaha\nFZ V3\n231796\n2019\n298\nPetrol\n54.72\nThird\n2019\nNot Available\nIndividual\n132538.36\nTier 3\n\n\n\n\n\n\n\n\nbikes.info(), bikes.describe(), bikes.isnull().sum() # no missing values\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 15 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   State                    10000 non-null  object \n 1   Avg Daily Distance (km)  10000 non-null  float64\n 2   Brand                    10000 non-null  object \n 3   Model                    10000 non-null  object \n 4   Price (INR)              10000 non-null  int64  \n 5   Year of Manufacture      10000 non-null  int64  \n 6   Engine Capacity (cc)     10000 non-null  int64  \n 7   Fuel Type                10000 non-null  object \n 8   Mileage (km/l)           10000 non-null  float64\n 9   Owner Type               10000 non-null  object \n 10  Registration Year        10000 non-null  int64  \n 11  Insurance Status         10000 non-null  object \n 12  Seller Type              10000 non-null  object \n 13  Resale Price (INR)       10000 non-null  float64\n 14  City Tier                10000 non-null  object \ndtypes: float64(3), int64(4), object(8)\nmemory usage: 1.1+ MB\n\n\n(None,\n        Avg Daily Distance (km)    Price (INR)  Year of Manufacture  \\\n count             10000.000000   10000.000000         10000.000000   \n mean                 42.533128  224328.722400          2019.510500   \n std                  21.676985  100753.660447             2.907668   \n min                   5.010000   50031.000000          2015.000000   \n 25%                  23.907500  137900.250000          2017.000000   \n 50%                  42.480000  223878.000000          2019.000000   \n 75%                  61.352500  311464.250000          2022.000000   \n max                  80.000000  399981.000000          2024.000000   \n \n        Engine Capacity (cc)  Mileage (km/l)  Registration Year  \\\n count          10000.000000    10000.000000        10000.00000   \n mean             552.695300       67.188926         2020.96510   \n std              261.176292       20.891728            2.74897   \n min              100.000000       25.000000         2015.00000   \n 25%              327.000000       50.680000         2019.00000   \n 50%              553.000000       69.850000         2022.00000   \n 75%              780.000000       84.542500         2023.00000   \n max             1000.000000      100.000000         2024.00000   \n \n        Resale Price (INR)  \n count        10000.000000  \n mean        133828.973998  \n std          66613.220382  \n min          20532.070000  \n 25%          78680.905000  \n 50%         128148.340000  \n 75%         181048.192500  \n max         317302.450000  ,\n State                      0\n Avg Daily Distance (km)    0\n Brand                      0\n Model                      0\n Price (INR)                0\n Year of Manufacture        0\n Engine Capacity (cc)       0\n Fuel Type                  0\n Mileage (km/l)             0\n Owner Type                 0\n Registration Year          0\n Insurance Status           0\n Seller Type                0\n Resale Price (INR)         0\n City Tier                  0\n dtype: int64)\n\n\n\n\n\n\nbikes.columns = bikes.columns.str.lower().str.replace(' ', '_')\nbikes.columns\n\nIndex(['state', 'avg_daily_distance_(km)', 'brand', 'model', 'price_(inr)',\n       'year_of_manufacture', 'engine_capacity_(cc)', 'fuel_type',\n       'mileage_(km/l)', 'owner_type', 'registration_year', 'insurance_status',\n       'seller_type', 'resale_price_(inr)', 'city_tier'],\n      dtype='object')\n\n\n\nbikes.rename(columns={'avg_daily_distance_(km)':'avg_daily_distance','price_(inr)':'price_inr','resale_price_(inr)':'resale_price_inr'},inplace=True)\n\n\nbikes.rename(columns={'mileage_(km/l)':'mileage','engine_capacity_(cc)':'engine_capacity'},inplace=True)\n\n\n\n\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\n\n\nbikes.to_sql('bikes',con=conn,if_exists='replace',index=False) \n\n10000\n\n\n\n%load_ext sql \n\n\n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n\n\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n\n\n\n\nWhat are the top-selling bike brands and models\n\n\n%%sql\nSELECT \nbrand,\nmodel,\nCOUNT(*) AS units_sold\nFROM bikes\nGROUP BY 1,2\nORDER BY 1 , 2 , 3 DESC;\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\nunits_sold\n\n\n\n\nBajaj\nAvenger 220\n249\n\n\nBajaj\nCT 100\n236\n\n\nBajaj\nDominar 400\n233\n\n\nBajaj\nPlatina 110\n228\n\n\nBajaj\nPulsar 150\n261\n\n\nHero\nGlamour\n258\n\n\nHero\nHF Deluxe\n257\n\n\nHero\nPassion Pro\n247\n\n\nHero\nSplendor Plus\n228\n\n\nHero\nXtreme 160R\n249\n\n\nHonda\nActiva\n230\n\n\nHonda\nCBR 650R\n248\n\n\nHonda\nDio\n242\n\n\nHonda\nShine\n244\n\n\nHonda\nUnicorn\n257\n\n\nKawasaki\nNinja 300\n256\n\n\nKawasaki\nNinja 400\n255\n\n\nKawasaki\nVersys 650\n261\n\n\nKawasaki\nVulcan S\n267\n\n\nKawasaki\nZ650\n252\n\n\nKTM\n125 Duke\n231\n\n\nKTM\n250 Duke\n269\n\n\nKTM\n390 Adventure\n254\n\n\nKTM\nDuke 200\n270\n\n\nKTM\nRC 390\n248\n\n\nRoyal Enfield\nClassic 350\n267\n\n\nRoyal Enfield\nHimalayan\n249\n\n\nRoyal Enfield\nHunter 350\n259\n\n\nRoyal Enfield\nInterceptor 650\n264\n\n\nRoyal Enfield\nMeteor 350\n214\n\n\nTVS\nApache RTR 160\n227\n\n\nTVS\nJupiter\n226\n\n\nTVS\nNTorq 125\n271\n\n\nTVS\nRonin\n252\n\n\nTVS\nSport\n258\n\n\nYamaha\nFascino 125\n248\n\n\nYamaha\nFZ V3\n256\n\n\nYamaha\nMT-15\n267\n\n\nYamaha\nR15 V4\n233\n\n\nYamaha\nRay ZR\n279\n\n\n\n\n\n\n\nWhat are the Brands Average Price(INR)\n\n\n%%sql \nSELECT \nbrand,\nmodel,\nROUND(AVG(price_inr),2) avg_price\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2,3 DESC;\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\navg_price\n\n\n\n\nBajaj\nAvenger 220\n236263.02\n\n\nBajaj\nCT 100\n229116.17\n\n\nBajaj\nDominar 400\n219954.57\n\n\nBajaj\nPlatina 110\n234069.37\n\n\nBajaj\nPulsar 150\n233303.21\n\n\nHero\nGlamour\n232147.26\n\n\nHero\nHF Deluxe\n219995.73\n\n\nHero\nPassion Pro\n221403.27\n\n\nHero\nSplendor Plus\n236058.32\n\n\nHero\nXtreme 160R\n221183.70\n\n\nHonda\nActiva\n230481.32\n\n\nHonda\nCBR 650R\n225379.57\n\n\nHonda\nDio\n216609.00\n\n\nHonda\nShine\n209988.51\n\n\nHonda\nUnicorn\n223242.46\n\n\nKawasaki\nNinja 300\n217552.12\n\n\nKawasaki\nNinja 400\n221419.33\n\n\nKawasaki\nVersys 650\n219403.90\n\n\nKawasaki\nVulcan S\n231590.10\n\n\nKawasaki\nZ650\n225589.97\n\n\nKTM\n125 Duke\n222657.63\n\n\nKTM\n250 Duke\n222430.67\n\n\nKTM\n390 Adventure\n218125.41\n\n\nKTM\nDuke 200\n225506.46\n\n\nKTM\nRC 390\n224212.75\n\n\nRoyal Enfield\nClassic 350\n219863.67\n\n\nRoyal Enfield\nHimalayan\n214261.30\n\n\nRoyal Enfield\nHunter 350\n233027.69\n\n\nRoyal Enfield\nInterceptor 650\n222950.28\n\n\nRoyal Enfield\nMeteor 350\n224339.43\n\n\nTVS\nApache RTR 160\n207949.01\n\n\nTVS\nJupiter\n232499.19\n\n\nTVS\nNTorq 125\n217794.60\n\n\nTVS\nRonin\n225114.23\n\n\nTVS\nSport\n228783.99\n\n\nYamaha\nFascino 125\n232287.48\n\n\nYamaha\nFZ V3\n223681.22\n\n\nYamaha\nMT-15\n227956.19\n\n\nYamaha\nR15 V4\n219433.70\n\n\nYamaha\nRay ZR\n225790.74\n\n\n\n\n\n\n\nWhat are the Fuel Types People Prefer the most with Average Price.\n\n\n%%sql \nSELECT \nfuel_type,\nCOUNT(*) count,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes \nGROUP BY 1\nORDER BY 2 DESC\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n3 rows affected.\n\n\n\n\n\nfuel_type\ncount\navg_price\n\n\n\n\nHybrid\n3360\n225654\n\n\nPetrol\n3357\n223561\n\n\nElectric\n3283\n223757\n\n\n\n\n\n\n\nStates With Their Price Segment Preference\n\n\n%%sql\nSELECT \nstate,\nCASE\n    WHEN price_inr BETWEEN 50000 AND 100000 THEN 'Cheap'\n    WHEN price_inr BETWEEN 100000 AND 200000 THEN 'Expensive'\n    ELSE 'Premium'\nEND AS price_category,\nCOUNT(*) units_sold\nFROM bikes\nGROUP BY 1,2 \nORDER BY 1 \n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n30 rows affected.\n\n\n\n\n\nstate\nprice_category\nunits_sold\n\n\n\n\nDelhi\nCheap\n147\n\n\nDelhi\nExpensive\n262\n\n\nDelhi\nPremium\n568\n\n\nGujarat\nCheap\n135\n\n\nGujarat\nExpensive\n279\n\n\nGujarat\nPremium\n588\n\n\nKarnataka\nCheap\n139\n\n\nKarnataka\nExpensive\n272\n\n\nKarnataka\nPremium\n571\n\n\nMadhya Pradesh\nCheap\n131\n\n\nMadhya Pradesh\nExpensive\n319\n\n\nMadhya Pradesh\nPremium\n523\n\n\nMaharashtra\nCheap\n139\n\n\nMaharashtra\nExpensive\n311\n\n\nMaharashtra\nPremium\n580\n\n\nPunjab\nCheap\n142\n\n\nPunjab\nExpensive\n306\n\n\nPunjab\nPremium\n603\n\n\nRajasthan\nCheap\n151\n\n\nRajasthan\nExpensive\n313\n\n\nRajasthan\nPremium\n553\n\n\nTamil Nadu\nCheap\n146\n\n\nTamil Nadu\nExpensive\n260\n\n\nTamil Nadu\nPremium\n588\n\n\nUttar Pradesh\nCheap\n134\n\n\nUttar Pradesh\nExpensive\n290\n\n\nUttar Pradesh\nPremium\n579\n\n\nWest Bengal\nCheap\n146\n\n\nWest Bengal\nExpensive\n274\n\n\nWest Bengal\nPremium\n551\n\n\n\n\n\n\n\nWhat is the Depriciation Percentage of Bikes in City Tiers?\n\n\n%%sql \nWITH tier_price AS\n(SELECT \ncity_tier,\nROUND(AVG(price_inr),0) avg_bike_price,\nROUND(AVG(resale_price_inr),0) avg_bike_resale_price\nFROM bikes\nGROUP BY 1 \nORDER BY 1\n)\nSELECT \n*,\nROUND(((avg_bike_price-avg_bike_resale_price)/avg_bike_price) * 100,2) AS depreciation_percentage\nFROM tier_price\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n4 rows affected.\n\n\n\n\n\ncity_tier\navg_bike_price\navg_bike_resale_price\ndepreciation_percentage\n\n\n\n\nMetro\n224238\n133491.0\n40.47\n\n\nTier 1\n224701\n133587.0\n40.55\n\n\nTier 2\n223199\n133443.0\n40.21\n\n\nTier 3\n225144\n134739.0\n40.15\n\n\n\n\n\n\n\nWho is selling bikes and their average selling price.\n\n\n%%sql \nSELECT \nseller_type,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n2 rows affected.\n\n\n\n\n\nseller_type\navg_selling_price\n\n\n\n\nIndividual\n132875.0\n\n\nDealer\n134770.0\n\n\n\n\n\n\n\nWhat is the Price Distribution with Insurance Status ?\n\n\n%%sql \nSELECT \ninsurance_status,\nCOUNT(*) units,\nROUND(AVG(price_inr),0) avg_price,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n3 rows affected.\n\n\n\n\n\ninsurance_status\nunits\navg_price\navg_selling_price\n\n\n\n\nActive\n3321\n225597\n133795.0\n\n\nNot Available\n3250\n221518\n132488.0\n\n\nExpired\n3429\n225765\n135133.0\n\n\n\n\n\n\n\nWhat are the States Bike Distibution with their Average price and Most Expensive Bike Price ?\n\n\n%%sql\nSELECT \nstate,\nCOUNT(*) bikes_sold,\nAVG(price_inr) avg_bike_price,\nMAX(price_inr) highest_bike_price\nFROM bikes\nGROUP BY 1\nORDER BY 2 DESC ,4 DESC \n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n10 rows affected.\n\n\n\n\n\nstate\nbikes_sold\navg_bike_price\nhighest_bike_price\n\n\n\n\nPunjab\n1051\n226566.1361\n399689\n\n\nMaharashtra\n1030\n220031.6515\n399253\n\n\nRajasthan\n1017\n220819.9302\n399730\n\n\nUttar Pradesh\n1003\n227511.1027\n399456\n\n\nGujarat\n1002\n226440.6477\n399909\n\n\nTamil Nadu\n994\n226715.3803\n399395\n\n\nKarnataka\n982\n225220.2515\n399791\n\n\nDelhi\n977\n228109.7861\n399947\n\n\nMadhya Pradesh\n973\n219936.9435\n399981\n\n\nWest Bengal\n971\n221925.1267\n399829\n\n\n\n\n\n\n\nWhat are the Engine Preference in CC by States ?\n\n\n%%sql \nSELECT \nstate,\nROUND(AVG(engine_capacity),0)\nFROM bikes\nGROUP BY 1 \n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n10 rows affected.\n\n\n\n\n\nstate\nROUND(AVG(engine_capacity),0)\n\n\n\n\nKarnataka\n552\n\n\nRajasthan\n554\n\n\nMadhya Pradesh\n556\n\n\nMaharashtra\n559\n\n\nTamil Nadu\n548\n\n\nPunjab\n554\n\n\nGujarat\n539\n\n\nUttar Pradesh\n550\n\n\nDelhi\n555\n\n\nWest Bengal\n560\n\n\n\n\n\n\n\nWhat is the Brand and Models with their Average Mileage and Average Engine Capacity ?\n\n\n%%sql \nSELECT\nbrand,\nmodel,\nROUND(AVG(mileage),0) avg_mileage_kmpl,\nROUND(AVG(engine_capacity),2) avg_engine_capacity_cc,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes\nGROUP BY 1 ,2\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\navg_mileage_kmpl\navg_engine_capacity_cc\navg_price\n\n\n\n\nRoyal Enfield\nHunter 350\n69.0\n579.65\n233028\n\n\nBajaj\nDominar 400\n66.0\n507.56\n219955\n\n\nKTM\n125 Duke\n68.0\n566.45\n222658\n\n\nKawasaki\nNinja 300\n65.0\n570.05\n217552\n\n\nYamaha\nFZ V3\n67.0\n538.81\n223681\n\n\nHero\nSplendor Plus\n69.0\n543.76\n236058\n\n\nRoyal Enfield\nMeteor 350\n67.0\n555.32\n224339\n\n\nKawasaki\nVulcan S\n69.0\n553.16\n231590\n\n\nKTM\n390 Adventure\n67.0\n562.12\n218125\n\n\nHero\nHF Deluxe\n64.0\n548.51\n219996\n\n\nTVS\nJupiter\n67.0\n540.27\n232499\n\n\nKawasaki\nZ650\n68.0\n550.19\n225590\n\n\nYamaha\nFascino 125\n67.0\n570.58\n232287\n\n\nHero\nXtreme 160R\n69.0\n559.36\n221184\n\n\nKawasaki\nVersys 650\n69.0\n565.49\n219404\n\n\nHero\nGlamour\n68.0\n564.24\n232147\n\n\nYamaha\nMT-15\n68.0\n556.87\n227956\n\n\nHonda\nActiva\n66.0\n528.47\n230481\n\n\nYamaha\nRay ZR\n67.0\n573.60\n225791\n\n\nBajaj\nAvenger 220\n67.0\n556.97\n236263\n\n\nHero\nPassion Pro\n67.0\n555.51\n221403\n\n\nTVS\nNTorq 125\n71.0\n555.60\n217795\n\n\nYamaha\nR15 V4\n66.0\n549.16\n219434\n\n\nHonda\nUnicorn\n71.0\n544.38\n223242\n\n\nTVS\nRonin\n67.0\n566.01\n225114\n\n\nBajaj\nPlatina 110\n67.0\n557.10\n234069\n\n\nBajaj\nPulsar 150\n69.0\n545.14\n233303\n\n\nKTM\nDuke 200\n67.0\n537.74\n225506\n\n\nHonda\nShine\n65.0\n558.97\n209989\n\n\nRoyal Enfield\nClassic 350\n65.0\n567.46\n219864\n\n\nHonda\nDio\n65.0\n556.07\n216609\n\n\nTVS\nSport\n66.0\n544.22\n228784\n\n\nKawasaki\nNinja 400\n64.0\n553.91\n221419\n\n\nTVS\nApache RTR 160\n68.0\n535.49\n207949\n\n\nKTM\nRC 390\n68.0\n540.78\n224213\n\n\nRoyal Enfield\nInterceptor 650\n67.0\n520.73\n222950\n\n\nHonda\nCBR 650R\n67.0\n560.89\n225380\n\n\nBajaj\nCT 100\n68.0\n572.22\n229116\n\n\nKTM\n250 Duke\n67.0\n534.99\n222431\n\n\nRoyal Enfield\nHimalayan\n65.0\n553.59\n214261\n\n\n\n\n\n\n\nHow much bike model of each brand travels in each day.\n\n\n%%sql\nSELECT\nbrand,\nmodel,\nROUND(AVG(avg_daily_distance),2) daily_distance_km\nFROM bikes\nGROUP BY 1 ,2\nORDER BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n40 rows affected.\n\n\n\n\n\nbrand\nmodel\ndaily_distance_km\n\n\n\n\nBajaj\nAvenger 220\n41.68\n\n\nBajaj\nCT 100\n40.95\n\n\nBajaj\nDominar 400\n42.28\n\n\nBajaj\nPlatina 110\n41.38\n\n\nBajaj\nPulsar 150\n41.94\n\n\nHero\nGlamour\n42.33\n\n\nHero\nHF Deluxe\n42.77\n\n\nHero\nPassion Pro\n45.13\n\n\nHero\nSplendor Plus\n41.87\n\n\nHero\nXtreme 160R\n43.19\n\n\nHonda\nActiva\n41.54\n\n\nHonda\nCBR 650R\n43.24\n\n\nHonda\nDio\n42.29\n\n\nHonda\nShine\n42.41\n\n\nHonda\nUnicorn\n43.9\n\n\nKawasaki\nNinja 300\n44.55\n\n\nKawasaki\nNinja 400\n41.79\n\n\nKawasaki\nVersys 650\n43.25\n\n\nKawasaki\nVulcan S\n40.85\n\n\nKawasaki\nZ650\n43.71\n\n\nKTM\n125 Duke\n41.68\n\n\nKTM\n250 Duke\n40.79\n\n\nKTM\n390 Adventure\n44.15\n\n\nKTM\nDuke 200\n42.49\n\n\nKTM\nRC 390\n40.64\n\n\nRoyal Enfield\nClassic 350\n42.3\n\n\nRoyal Enfield\nHimalayan\n42.84\n\n\nRoyal Enfield\nHunter 350\n43.7\n\n\nRoyal Enfield\nInterceptor 650\n41.83\n\n\nRoyal Enfield\nMeteor 350\n45.46\n\n\nTVS\nApache RTR 160\n41.11\n\n\nTVS\nJupiter\n41.61\n\n\nTVS\nNTorq 125\n43.31\n\n\nTVS\nRonin\n42.63\n\n\nTVS\nSport\n42.69\n\n\nYamaha\nFascino 125\n43.3\n\n\nYamaha\nFZ V3\n42.9\n\n\nYamaha\nMT-15\n41.52\n\n\nYamaha\nR15 V4\n43.0\n\n\nYamaha\nRay ZR\n42.32\n\n\n\n\n\n\n\nWhat is the Best Performing Year Revenue Wise by each Brand ?\n\n\n%%sql\nWITH Revenue_Brand AS \n(SELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n),\nyear_ranked AS \n(SELECT \n* , \nRANK() OVER(PARTITION BY brand ORDER BY revenue_inr DESC) as ranking\nFROM Revenue_Brand\n)\nSELECT * FROM year_ranked WHERE ranking = 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n8 rows affected.\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\nranking\n\n\n\n\nBajaj\n2024\n57982456.0000\n1\n\n\nHero\n2024\n67174614.0000\n1\n\n\nHonda\n2024\n58437509.0000\n1\n\n\nKawasaki\n2024\n71845334.0000\n1\n\n\nKTM\n2024\n69337919.0000\n1\n\n\nRoyal Enfield\n2024\n61471090.0000\n1\n\n\nTVS\n2024\n63856187.0000\n1\n\n\nYamaha\n2024\n62200342.0000\n1\n\n\n\n\n\n\n\nWhat is the Revenue of each Brand per Year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n80 rows affected.\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\n\n\n\n\nBajaj\n2015\n12705702.0000\n\n\nBajaj\n2016\n13691874.0000\n\n\nBajaj\n2017\n19455306.0000\n\n\nBajaj\n2018\n21464659.0000\n\n\nBajaj\n2019\n21280809.0000\n\n\nBajaj\n2020\n24776346.0000\n\n\nBajaj\n2021\n26770708.0000\n\n\nBajaj\n2022\n34429187.0000\n\n\nBajaj\n2023\n45853229.0000\n\n\nBajaj\n2024\n57982456.0000\n\n\nHero\n2015\n11773585.0000\n\n\nHero\n2016\n14051936.0000\n\n\nHero\n2017\n15159928.0000\n\n\nHero\n2018\n14248666.0000\n\n\nHero\n2019\n22453875.0000\n\n\nHero\n2020\n23358010.0000\n\n\nHero\n2021\n25269434.0000\n\n\nHero\n2022\n38528366.0000\n\n\nHero\n2023\n47997131.0000\n\n\nHero\n2024\n67174614.0000\n\n\nHonda\n2015\n10835149.0000\n\n\nHonda\n2016\n13074250.0000\n\n\nHonda\n2017\n15891562.0000\n\n\nHonda\n2018\n16161945.0000\n\n\nHonda\n2019\n23517179.0000\n\n\nHonda\n2020\n25580464.0000\n\n\nHonda\n2021\n29066031.0000\n\n\nHonda\n2022\n34340051.0000\n\n\nHonda\n2023\n43030583.0000\n\n\nHonda\n2024\n58437509.0000\n\n\nKawasaki\n2015\n15668191.0000\n\n\nKawasaki\n2016\n9604010.0000\n\n\nKawasaki\n2017\n17227399.0000\n\n\nKawasaki\n2018\n16687188.0000\n\n\nKawasaki\n2019\n24235410.0000\n\n\nKawasaki\n2020\n25094472.0000\n\n\nKawasaki\n2021\n30160213.0000\n\n\nKawasaki\n2022\n35094953.0000\n\n\nKawasaki\n2023\n42485748.0000\n\n\nKawasaki\n2024\n71845334.0000\n\n\nKTM\n2015\n9670746.0000\n\n\nKTM\n2016\n13439731.0000\n\n\nKTM\n2017\n14079433.0000\n\n\nKTM\n2018\n20744460.0000\n\n\nKTM\n2019\n24247508.0000\n\n\nKTM\n2020\n25642272.0000\n\n\nKTM\n2021\n27039079.0000\n\n\nKTM\n2022\n34301426.0000\n\n\nKTM\n2023\n44660548.0000\n\n\nKTM\n2024\n69337919.0000\n\n\nRoyal Enfield\n2015\n13021717.0000\n\n\nRoyal Enfield\n2016\n14216805.0000\n\n\nRoyal Enfield\n2017\n18166570.0000\n\n\nRoyal Enfield\n2018\n18423327.0000\n\n\nRoyal Enfield\n2019\n15885920.0000\n\n\nRoyal Enfield\n2020\n20678910.0000\n\n\nRoyal Enfield\n2021\n33558439.0000\n\n\nRoyal Enfield\n2022\n34743002.0000\n\n\nRoyal Enfield\n2023\n49110568.0000\n\n\nRoyal Enfield\n2024\n61471090.0000\n\n\nTVS\n2015\n11494553.0000\n\n\nTVS\n2016\n17448136.0000\n\n\nTVS\n2017\n18445540.0000\n\n\nTVS\n2018\n15096315.0000\n\n\nTVS\n2019\n22996130.0000\n\n\nTVS\n2020\n22266686.0000\n\n\nTVS\n2021\n26270255.0000\n\n\nTVS\n2022\n34431906.0000\n\n\nTVS\n2023\n42220926.0000\n\n\nTVS\n2024\n63856187.0000\n\n\nYamaha\n2015\n12525661.0000\n\n\nYamaha\n2016\n13610480.0000\n\n\nYamaha\n2017\n17534159.0000\n\n\nYamaha\n2018\n18385285.0000\n\n\nYamaha\n2019\n24000188.0000\n\n\nYamaha\n2020\n25209581.0000\n\n\nYamaha\n2021\n30673557.0000\n\n\nYamaha\n2022\n37112687.0000\n\n\nYamaha\n2023\n48605718.0000\n\n\nYamaha\n2024\n62200342.0000\n\n\n\n\n\n\n\nWhat are the Units Sold by Each Brands each year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) units\nFROM bikes\nGROUP BY 1 ,2 \nORDER BY 1,2 DESC\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n80 rows affected.\n\n\n\n\n\nbrand\nregistration_year\nunits\n\n\n\n\nBajaj\n2024\n255\n\n\nBajaj\n2023\n211\n\n\nBajaj\n2022\n145\n\n\nBajaj\n2021\n117\n\n\nBajaj\n2020\n101\n\n\nBajaj\n2019\n94\n\n\nBajaj\n2018\n93\n\n\nBajaj\n2017\n78\n\n\nBajaj\n2016\n59\n\n\nBajaj\n2015\n54\n\n\nHero\n2024\n299\n\n\nHero\n2023\n216\n\n\nHero\n2022\n169\n\n\nHero\n2021\n112\n\n\nHero\n2020\n105\n\n\nHero\n2019\n97\n\n\nHero\n2018\n59\n\n\nHero\n2017\n65\n\n\nHero\n2016\n64\n\n\nHero\n2015\n53\n\n\nHonda\n2024\n266\n\n\nHonda\n2023\n196\n\n\nHonda\n2022\n161\n\n\nHonda\n2021\n125\n\n\nHonda\n2020\n120\n\n\nHonda\n2019\n94\n\n\nHonda\n2018\n72\n\n\nHonda\n2017\n75\n\n\nHonda\n2016\n62\n\n\nHonda\n2015\n50\n\n\nKawasaki\n2024\n323\n\n\nKawasaki\n2023\n196\n\n\nKawasaki\n2022\n161\n\n\nKawasaki\n2021\n139\n\n\nKawasaki\n2020\n112\n\n\nKawasaki\n2019\n99\n\n\nKawasaki\n2018\n72\n\n\nKawasaki\n2017\n75\n\n\nKawasaki\n2016\n47\n\n\nKawasaki\n2015\n67\n\n\nKTM\n2024\n307\n\n\nKTM\n2023\n192\n\n\nKTM\n2022\n153\n\n\nKTM\n2021\n123\n\n\nKTM\n2020\n111\n\n\nKTM\n2019\n116\n\n\nKTM\n2018\n93\n\n\nKTM\n2017\n70\n\n\nKTM\n2016\n60\n\n\nKTM\n2015\n47\n\n\nRoyal Enfield\n2024\n279\n\n\nRoyal Enfield\n2023\n216\n\n\nRoyal Enfield\n2022\n152\n\n\nRoyal Enfield\n2021\n150\n\n\nRoyal Enfield\n2020\n101\n\n\nRoyal Enfield\n2019\n78\n\n\nRoyal Enfield\n2018\n77\n\n\nRoyal Enfield\n2017\n78\n\n\nRoyal Enfield\n2016\n63\n\n\nRoyal Enfield\n2015\n59\n\n\nTVS\n2024\n285\n\n\nTVS\n2023\n192\n\n\nTVS\n2022\n160\n\n\nTVS\n2021\n120\n\n\nTVS\n2020\n92\n\n\nTVS\n2019\n109\n\n\nTVS\n2018\n72\n\n\nTVS\n2017\n79\n\n\nTVS\n2016\n73\n\n\nTVS\n2015\n52\n\n\nYamaha\n2024\n282\n\n\nYamaha\n2023\n209\n\n\nYamaha\n2022\n164\n\n\nYamaha\n2021\n133\n\n\nYamaha\n2020\n114\n\n\nYamaha\n2019\n107\n\n\nYamaha\n2018\n81\n\n\nYamaha\n2017\n76\n\n\nYamaha\n2016\n61\n\n\nYamaha\n2015\n56\n\n\n\n\n\n\n\nHow many new units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type = 'First'\nGROUP BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n8 rows affected.\n\n\n\n\n\nbrand\nunits\n\n\n\n\nHero\n411\n\n\nRoyal Enfield\n419\n\n\nTVS\n414\n\n\nKawasaki\n457\n\n\nYamaha\n458\n\n\nBajaj\n415\n\n\nHonda\n405\n\n\nKTM\n428\n\n\n\n\n\n\n\nHow many old units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type &lt;&gt; 'First'\nGROUP BY 1\n\n * mysql+pymysql://root:***@localhost/datawarehouseanalytics\n8 rows affected.\n\n\n\n\n\nbrand\nunits\n\n\n\n\nRoyal Enfield\n834\n\n\nBajaj\n792\n\n\nKTM\n844\n\n\nKawasaki\n834\n\n\nYamaha\n825\n\n\nHero\n828\n\n\nHonda\n816\n\n\nTVS\n820"
  },
  {
    "objectID": "posts/welcome/index.html#ola-rides-insights",
    "href": "posts/welcome/index.html#ola-rides-insights",
    "title": "Ola July Report",
    "section": "",
    "text": "This project analyzes the Ola rides dataset for the month of July, containing 100,000 rows of data. The analysis focuses on key metrics such as revenue, cancellation rate, and ratings. The insights are visualized using Power BI to provide an intuitive and interactive report.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\ndf = pd.read_excel('Ola_Data.xlsx', sheet_name='July')\ndf.head()\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-26 14:00:00\n14:00:00\nCNR7153255142\nCanceled by Driver\nCID713523\nPrime Sedan\nTumkur Road\nRT Nagar\nNaN\nNaN\nNaN\nPersonal & Car related issue\nNaN\nNaN\n444\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n1\n2024-07-25 22:20:00\n22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNaN\nNaN\nNo\nNaN\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-30 19:59:00\n19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNaN\nNaN\nNo\nNaN\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n3\n2024-07-22 03:15:00\n03:15:00\nCNR2395710036\nCanceled by Customer\nCID581320\neBike\nHSR Layout\nVijayanagar\nNaN\nNaN\nDriver is not moving towards pickup location\nNaN\nNaN\nNaN\n384\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n4\n2024-07-02 09:02:00\n09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNaN\nNaN\nNo\nNaN\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n\n\n\n\n\n\ndf.info(),df.drop_duplicates(inplace=True),\ndf['Canceled_Rides_by_Driver'].value_counts(),df['Vehicle_Type'].value_counts(),df['Payment_Method'].value_counts(),df['Booking_Status'].value_counts() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 103024 entries, 0 to 103023\nData columns (total 20 columns):\n #   Column                      Non-Null Count   Dtype         \n---  ------                      --------------   -----         \n 0   Date                        103024 non-null  datetime64[ns]\n 1   Time                        103024 non-null  object        \n 2   Booking_ID                  103024 non-null  object        \n 3   Booking_Status              103024 non-null  object        \n 4   Customer_ID                 103024 non-null  object        \n 5   Vehicle_Type                103024 non-null  object        \n 6   Pickup_Location             103024 non-null  object        \n 7   Drop_Location               103024 non-null  object        \n 8   V_TAT                       63967 non-null   float64       \n 9   C_TAT                       63967 non-null   float64       \n 10  Canceled_Rides_by_Customer  10499 non-null   object        \n 11  Canceled_Rides_by_Driver    18434 non-null   object        \n 12  Incomplete_Rides            63967 non-null   object        \n 13  Incomplete_Rides_Reason     3926 non-null    object        \n 14  Booking_Value               103024 non-null  int64         \n 15  Payment_Method              63967 non-null   object        \n 16  Ride_Distance               103024 non-null  int64         \n 17  Driver_Ratings              63967 non-null   float64       \n 18  Customer_Rating             63967 non-null   float64       \n 19  Vehicle Images              103024 non-null  object        \ndtypes: datetime64[ns](1), float64(4), int64(2), object(13)\nmemory usage: 15.7+ MB\n\n\n(Canceled_Rides_by_Driver\n Personal & Car related issue           6542\n Customer related issue                 5413\n Customer was coughing/sick             3654\n More than permitted people in there    2825\n Name: count, dtype: int64,\n Vehicle_Type\n Prime Sedan    14877\n eBike          14816\n Auto           14755\n Prime Plus     14707\n Bike           14662\n Prime SUV      14655\n Mini           14552\n Name: count, dtype: int64,\n Payment_Method\n Cash           35022\n UPI            25881\n Credit Card     2435\n Debit Card       629\n Name: count, dtype: int64,\n Booking_Status\n Success                 63967\n Canceled by Driver      18434\n Canceled by Customer    10499\n Driver Not Found        10124\n Name: count, dtype: int64)\n\n\n\n\n\n\nfrom sqlalchemy import create_engine as ce\nsql_eng  = ce('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = sql_eng.connect()\n\n\ndf_to_sql = df.to_sql('ola_july', con=conn, if_exists='replace', index=False)\n\n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\n\n\n\nRetrieve all successful bookings\n\n\n%%sql \nSELECT * FROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-25 22:20:00\n0 days 22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNone\nNone\nNo\nNone\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-02 09:02:00\n0 days 09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNone\nNone\nNo\nNone\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n3\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n4\n2024-07-23 09:51:00\n0 days 09:51:00\nCNR3612067560\nSuccess\nCID476071\nBike\nTumkur Road\nWhitefield\n133.0\n40.0\nNone\nNone\nNo\nNone\n140\nCash\n49\n3.2\n4.5\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n63962\n2024-07-31 09:06:00\n0 days 09:06:00\nCNR9488489435\nSuccess\nCID371654\nPrime Plus\nRichmond Town\nVarthur\n245.0\n35.0\nNone\nNone\nNo\nNone\n111\nCash\n41\n3.6\n3.8\nhttps://cdn-icons-png.flaticon.com/128/11409/1...\n\n\n63963\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n63964\n2024-07-31 13:59:00\n0 days 13:59:00\nCNR1286151233\nSuccess\nCID113188\nPrime SUV\nBannerghatta Road\nJP Nagar\n35.0\n75.0\nNone\nNone\nNo\nNone\n2201\nCash\n37\n3.6\n3.2\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n63965\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n63966\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n63967 rows × 20 columns\n\n\n\n\n\nWhat is the average ride distance for each vehicle type?\n\n\n%%sql\nSELECT\nVehicle_Type,\nAVG(Ride_Distance) AS avg_dist\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_dist\n\n\n\n\n0\nPrime Sedan\n15.7649\n\n\n1\nBike\n15.5331\n\n\n2\nPrime SUV\n15.2745\n\n\n3\neBike\n15.5806\n\n\n4\nMini\n15.5101\n\n\n5\nPrime Plus\n15.4475\n\n\n6\nAuto\n6.2381\n\n\n\n\n\n\n\n\n\nWhat is the total number of cancelled rides by customers?\n\n\n%%sql \nSELECT \nCOUNT(Canceled_Rides_by_Customer) cnt\nFROM \nola_july;\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n10499\n\n\n\n\n\n\n\n\n\nWhat are the top 5 customers who booked the highest number of rides?\n\n\n%%sql\nSELECT \nCustomer_ID,\nCOUNT(Booking_ID)\nFROM ola_july\nGROUP BY Customer_ID\nORDER BY COUNT(Booking_ID) DESC\nLIMIT 5 ;\n\n\n\n\n\n\n\n\nCustomer_ID\nCOUNT(Booking_ID)\n\n\n\n\n0\nCID954071\n5\n\n\n1\nCID539191\n4\n\n\n2\nCID189965\n4\n\n\n3\nCID268274\n4\n\n\n4\nCID952434\n4\n\n\n\n\n\n\n\n\n\nWhat is the number of rides cancelled by drivers due to personal and car-related issues?\n\n\n%%sql\nSELECT \nCOUNT(*) AS cnt\nFROM ola_july\nWHERE Canceled_Rides_by_Driver = 'Personal & Car related issue';\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n6542\n\n\n\n\n\n\n\n\n\nWhat is the maximum and minimum driver ratings for Prime Sedan bookings?\n\n\n%%sql\nSELECT \nMAX(Driver_Ratings) AS max,\nMIN(Driver_Ratings) AS min\nFROM ola_july\nWHERE Vehicle_Type = 'Prime Sedan';\n\n\n\n\n\n\n\n\nmax\nmin\n\n\n\n\n0\n5.0\n3.0\n\n\n\n\n\n\n\n\n\nAll rides where payment was made using UPI.\n\n\n%%sql\nSELECT *\nFROM ola_july\nWHERE Payment_Method = 'UPI' ;\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n2\n2024-07-27 13:18:00\n0 days 13:18:00\nCNR4524472111\nSuccess\nCID540929\nAuto\nCox Town\nYelahanka\n126.0\n35.0\nNone\nNone\nNo\nNone\n330\nUPI\n8\n3.0\n4.8\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n3\n2024-07-16 09:54:00\n0 days 09:54:00\nCNR8181602032\nSuccess\nCID167642\nBike\nIndiranagar\nMG Road\n70.0\n95.0\nNone\nNone\nNo\nNone\n378\nUPI\n18\n4.8\n4.1\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n4\n2024-07-02 10:25:00\n0 days 10:25:00\nCNR8090918544\nSuccess\nCID640151\nBike\nMagadi Road\nHSR Layout\n126.0\n95.0\nNone\nNone\nNo\nNone\n343\nUPI\n23\n3.7\n3.6\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25876\n2024-07-31 19:34:00\n0 days 19:34:00\nCNR4870774895\nSuccess\nCID266336\nPrime Sedan\nMarathahalli\nCox Town\n189.0\n30.0\nNone\nNone\nNo\nNone\n280\nUPI\n38\n3.4\n4.1\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n25877\n2024-07-31 03:00:00\n0 days 03:00:00\nCNR9738039746\nSuccess\nCID922711\neBike\nChickpet\nRT Nagar\n42.0\n135.0\nNone\nNone\nNo\nNone\n310\nUPI\n7\n3.8\n3.3\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25878\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n25879\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25880\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n25881 rows × 20 columns\n\n\n\n\n\nWhat is the average customer rating per vehicle type?\n\n\n%%sql\nSELECT \nVehicle_Type,\nROUND(AVG(Customer_Rating),2) AS avg_rating\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_rating\n\n\n\n\n0\nPrime Sedan\n4.00\n\n\n1\nBike\n3.99\n\n\n2\nPrime SUV\n4.00\n\n\n3\neBike\n3.99\n\n\n4\nMini\n4.00\n\n\n5\nPrime Plus\n4.01\n\n\n6\nAuto\n4.00\n\n\n\n\n\n\n\n\n\nWhat is the total booking value of rides completed successfully?\n\n\n%%sql \nSELECT \nSUM(Booking_Value) AS total_booking_val\nFROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\ntotal_booking_val\n\n\n\n\n0\n35080467\n\n\n\n\n\n\n\n\n\nAll incomplete rides along with the reason.\n\n\n%%sql \nSELECT \nCustomer_ID,\nBooking_ID,\nIncomplete_Rides_Reason\nFROM ola_july\nWHERE Incomplete_Rides = 'Yes';\n\n\n\n\n\n\n\n\nCustomer_ID\nBooking_ID\nIncomplete_Rides_Reason\n\n\n\n\n0\nCID296026\nCNR5176704322\nCustomer Demand\n\n\n1\nCID649563\nCNR9312632867\nVehicle Breakdown\n\n\n2\nCID517661\nCNR7924302885\nCustomer Demand\n\n\n3\nCID190281\nCNR1640228587\nOther Issue\n\n\n4\nCID526261\nCNR7623690602\nOther Issue\n\n\n...\n...\n...\n...\n\n\n3921\nCID118412\nCNR5546265534\nCustomer Demand\n\n\n3922\nCID771129\nCNR1954831907\nVehicle Breakdown\n\n\n3923\nCID112738\nCNR1271821250\nVehicle Breakdown\n\n\n3924\nCID382466\nCNR4652634649\nVehicle Breakdown\n\n\n3925\nCID406104\nCNR5427755403\nOther Issue\n\n\n\n\n3926 rows × 3 columns\n\n\n\nDownload the Power BI Dashboard"
  },
  {
    "objectID": "posts/Ola-July-Report/index.html",
    "href": "posts/Ola-July-Report/index.html",
    "title": "Ola July Report",
    "section": "",
    "text": "This project analyzes the Ola rides dataset for the month of July, containing 100,000 rows of data. The analysis focuses on key metrics such as revenue, cancellation rate, and ratings. The insights are visualized using Power BI to provide an intuitive and interactive report.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\ndf = pd.read_excel('Ola_Data.xlsx', sheet_name='July')\ndf.head()\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-26 14:00:00\n14:00:00\nCNR7153255142\nCanceled by Driver\nCID713523\nPrime Sedan\nTumkur Road\nRT Nagar\nNaN\nNaN\nNaN\nPersonal & Car related issue\nNaN\nNaN\n444\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n1\n2024-07-25 22:20:00\n22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNaN\nNaN\nNo\nNaN\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-30 19:59:00\n19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNaN\nNaN\nNo\nNaN\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n3\n2024-07-22 03:15:00\n03:15:00\nCNR2395710036\nCanceled by Customer\nCID581320\neBike\nHSR Layout\nVijayanagar\nNaN\nNaN\nDriver is not moving towards pickup location\nNaN\nNaN\nNaN\n384\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n4\n2024-07-02 09:02:00\n09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNaN\nNaN\nNo\nNaN\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n\n\n\n\n\n\ndf.info(),df.drop_duplicates(inplace=True),\ndf['Canceled_Rides_by_Driver'].value_counts(),df['Vehicle_Type'].value_counts(),df['Payment_Method'].value_counts(),df['Booking_Status'].value_counts() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 103024 entries, 0 to 103023\nData columns (total 20 columns):\n #   Column                      Non-Null Count   Dtype         \n---  ------                      --------------   -----         \n 0   Date                        103024 non-null  datetime64[ns]\n 1   Time                        103024 non-null  object        \n 2   Booking_ID                  103024 non-null  object        \n 3   Booking_Status              103024 non-null  object        \n 4   Customer_ID                 103024 non-null  object        \n 5   Vehicle_Type                103024 non-null  object        \n 6   Pickup_Location             103024 non-null  object        \n 7   Drop_Location               103024 non-null  object        \n 8   V_TAT                       63967 non-null   float64       \n 9   C_TAT                       63967 non-null   float64       \n 10  Canceled_Rides_by_Customer  10499 non-null   object        \n 11  Canceled_Rides_by_Driver    18434 non-null   object        \n 12  Incomplete_Rides            63967 non-null   object        \n 13  Incomplete_Rides_Reason     3926 non-null    object        \n 14  Booking_Value               103024 non-null  int64         \n 15  Payment_Method              63967 non-null   object        \n 16  Ride_Distance               103024 non-null  int64         \n 17  Driver_Ratings              63967 non-null   float64       \n 18  Customer_Rating             63967 non-null   float64       \n 19  Vehicle Images              103024 non-null  object        \ndtypes: datetime64[ns](1), float64(4), int64(2), object(13)\nmemory usage: 15.7+ MB\n\n\n(Canceled_Rides_by_Driver\n Personal & Car related issue           6542\n Customer related issue                 5413\n Customer was coughing/sick             3654\n More than permitted people in there    2825\n Name: count, dtype: int64,\n Vehicle_Type\n Prime Sedan    14877\n eBike          14816\n Auto           14755\n Prime Plus     14707\n Bike           14662\n Prime SUV      14655\n Mini           14552\n Name: count, dtype: int64,\n Payment_Method\n Cash           35022\n UPI            25881\n Credit Card     2435\n Debit Card       629\n Name: count, dtype: int64,\n Booking_Status\n Success                 63967\n Canceled by Driver      18434\n Canceled by Customer    10499\n Driver Not Found        10124\n Name: count, dtype: int64)\n\n\n\n\n\n\nfrom sqlalchemy import create_engine as ce\nsql_eng  = ce('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = sql_eng.connect()\n\n\ndf_to_sql = df.to_sql('ola_july', con=conn, if_exists='replace', index=False)\n\n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\n\n\n\nRetrieve all successful bookings\n\n\n%%sql \nSELECT * FROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-25 22:20:00\n0 days 22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNone\nNone\nNo\nNone\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-02 09:02:00\n0 days 09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNone\nNone\nNo\nNone\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n3\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n4\n2024-07-23 09:51:00\n0 days 09:51:00\nCNR3612067560\nSuccess\nCID476071\nBike\nTumkur Road\nWhitefield\n133.0\n40.0\nNone\nNone\nNo\nNone\n140\nCash\n49\n3.2\n4.5\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n63962\n2024-07-31 09:06:00\n0 days 09:06:00\nCNR9488489435\nSuccess\nCID371654\nPrime Plus\nRichmond Town\nVarthur\n245.0\n35.0\nNone\nNone\nNo\nNone\n111\nCash\n41\n3.6\n3.8\nhttps://cdn-icons-png.flaticon.com/128/11409/1...\n\n\n63963\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n63964\n2024-07-31 13:59:00\n0 days 13:59:00\nCNR1286151233\nSuccess\nCID113188\nPrime SUV\nBannerghatta Road\nJP Nagar\n35.0\n75.0\nNone\nNone\nNo\nNone\n2201\nCash\n37\n3.6\n3.2\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n63965\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n63966\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n63967 rows × 20 columns\n\n\n\n\n\nWhat is the average ride distance for each vehicle type?\n\n\n%%sql\nSELECT\nVehicle_Type,\nAVG(Ride_Distance) AS avg_dist\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_dist\n\n\n\n\n0\nPrime Sedan\n15.7649\n\n\n1\nBike\n15.5331\n\n\n2\nPrime SUV\n15.2745\n\n\n3\neBike\n15.5806\n\n\n4\nMini\n15.5101\n\n\n5\nPrime Plus\n15.4475\n\n\n6\nAuto\n6.2381\n\n\n\n\n\n\n\n\n\nWhat is the total number of cancelled rides by customers?\n\n\n%%sql \nSELECT \nCOUNT(Canceled_Rides_by_Customer) cnt\nFROM \nola_july;\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n10499\n\n\n\n\n\n\n\n\n\nWhat are the top 5 customers who booked the highest number of rides?\n\n\n%%sql\nSELECT \nCustomer_ID,\nCOUNT(Booking_ID)\nFROM ola_july\nGROUP BY Customer_ID\nORDER BY COUNT(Booking_ID) DESC\nLIMIT 5 ;\n\n\n\n\n\n\n\n\nCustomer_ID\nCOUNT(Booking_ID)\n\n\n\n\n0\nCID954071\n5\n\n\n1\nCID539191\n4\n\n\n2\nCID189965\n4\n\n\n3\nCID268274\n4\n\n\n4\nCID952434\n4\n\n\n\n\n\n\n\n\n\nWhat is the number of rides cancelled by drivers due to personal and car-related issues?\n\n\n%%sql\nSELECT \nCOUNT(*) AS cnt\nFROM ola_july\nWHERE Canceled_Rides_by_Driver = 'Personal & Car related issue';\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n6542\n\n\n\n\n\n\n\n\n\nWhat is the maximum and minimum driver ratings for Prime Sedan bookings?\n\n\n%%sql\nSELECT \nMAX(Driver_Ratings) AS max,\nMIN(Driver_Ratings) AS min\nFROM ola_july\nWHERE Vehicle_Type = 'Prime Sedan';\n\n\n\n\n\n\n\n\nmax\nmin\n\n\n\n\n0\n5.0\n3.0\n\n\n\n\n\n\n\n\n\nAll rides where payment was made using UPI.\n\n\n%%sql\nSELECT *\nFROM ola_july\nWHERE Payment_Method = 'UPI' ;\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n2\n2024-07-27 13:18:00\n0 days 13:18:00\nCNR4524472111\nSuccess\nCID540929\nAuto\nCox Town\nYelahanka\n126.0\n35.0\nNone\nNone\nNo\nNone\n330\nUPI\n8\n3.0\n4.8\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n3\n2024-07-16 09:54:00\n0 days 09:54:00\nCNR8181602032\nSuccess\nCID167642\nBike\nIndiranagar\nMG Road\n70.0\n95.0\nNone\nNone\nNo\nNone\n378\nUPI\n18\n4.8\n4.1\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n4\n2024-07-02 10:25:00\n0 days 10:25:00\nCNR8090918544\nSuccess\nCID640151\nBike\nMagadi Road\nHSR Layout\n126.0\n95.0\nNone\nNone\nNo\nNone\n343\nUPI\n23\n3.7\n3.6\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25876\n2024-07-31 19:34:00\n0 days 19:34:00\nCNR4870774895\nSuccess\nCID266336\nPrime Sedan\nMarathahalli\nCox Town\n189.0\n30.0\nNone\nNone\nNo\nNone\n280\nUPI\n38\n3.4\n4.1\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n25877\n2024-07-31 03:00:00\n0 days 03:00:00\nCNR9738039746\nSuccess\nCID922711\neBike\nChickpet\nRT Nagar\n42.0\n135.0\nNone\nNone\nNo\nNone\n310\nUPI\n7\n3.8\n3.3\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25878\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n25879\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25880\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n25881 rows × 20 columns\n\n\n\n\n\nWhat is the average customer rating per vehicle type?\n\n\n%%sql\nSELECT \nVehicle_Type,\nROUND(AVG(Customer_Rating),2) AS avg_rating\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_rating\n\n\n\n\n0\nPrime Sedan\n4.00\n\n\n1\nBike\n3.99\n\n\n2\nPrime SUV\n4.00\n\n\n3\neBike\n3.99\n\n\n4\nMini\n4.00\n\n\n5\nPrime Plus\n4.01\n\n\n6\nAuto\n4.00\n\n\n\n\n\n\n\n\n\nWhat is the total booking value of rides completed successfully?\n\n\n%%sql \nSELECT \nSUM(Booking_Value) AS total_booking_val\nFROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\ntotal_booking_val\n\n\n\n\n0\n35080467\n\n\n\n\n\n\n\n\n\nAll incomplete rides along with the reason.\n\n\n%%sql \nSELECT \nCustomer_ID,\nBooking_ID,\nIncomplete_Rides_Reason\nFROM ola_july\nWHERE Incomplete_Rides = 'Yes';\n\n\n\n\n\n\n\n\nCustomer_ID\nBooking_ID\nIncomplete_Rides_Reason\n\n\n\n\n0\nCID296026\nCNR5176704322\nCustomer Demand\n\n\n1\nCID649563\nCNR9312632867\nVehicle Breakdown\n\n\n2\nCID517661\nCNR7924302885\nCustomer Demand\n\n\n3\nCID190281\nCNR1640228587\nOther Issue\n\n\n4\nCID526261\nCNR7623690602\nOther Issue\n\n\n...\n...\n...\n...\n\n\n3921\nCID118412\nCNR5546265534\nCustomer Demand\n\n\n3922\nCID771129\nCNR1954831907\nVehicle Breakdown\n\n\n3923\nCID112738\nCNR1271821250\nVehicle Breakdown\n\n\n3924\nCID382466\nCNR4652634649\nVehicle Breakdown\n\n\n3925\nCID406104\nCNR5427755403\nOther Issue\n\n\n\n\n3926 rows × 3 columns\n\n\n\nDownload the Power BI Dashboard"
  },
  {
    "objectID": "posts/Ola-July-Report/index.html#ola-rides-insights",
    "href": "posts/Ola-July-Report/index.html#ola-rides-insights",
    "title": "Ola July Report",
    "section": "",
    "text": "This project analyzes the Ola rides dataset for the month of July, containing 100,000 rows of data. The analysis focuses on key metrics such as revenue, cancellation rate, and ratings. The insights are visualized using Power BI to provide an intuitive and interactive report.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\ndf = pd.read_excel('Ola_Data.xlsx', sheet_name='July')\ndf.head()\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-26 14:00:00\n14:00:00\nCNR7153255142\nCanceled by Driver\nCID713523\nPrime Sedan\nTumkur Road\nRT Nagar\nNaN\nNaN\nNaN\nPersonal & Car related issue\nNaN\nNaN\n444\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n1\n2024-07-25 22:20:00\n22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNaN\nNaN\nNo\nNaN\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-30 19:59:00\n19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNaN\nNaN\nNo\nNaN\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n3\n2024-07-22 03:15:00\n03:15:00\nCNR2395710036\nCanceled by Customer\nCID581320\neBike\nHSR Layout\nVijayanagar\nNaN\nNaN\nDriver is not moving towards pickup location\nNaN\nNaN\nNaN\n384\nNaN\n0\nNaN\nNaN\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n4\n2024-07-02 09:02:00\n09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNaN\nNaN\nNo\nNaN\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n\n\n\n\n\n\ndf.info(),df.drop_duplicates(inplace=True),\ndf['Canceled_Rides_by_Driver'].value_counts(),df['Vehicle_Type'].value_counts(),df['Payment_Method'].value_counts(),df['Booking_Status'].value_counts() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 103024 entries, 0 to 103023\nData columns (total 20 columns):\n #   Column                      Non-Null Count   Dtype         \n---  ------                      --------------   -----         \n 0   Date                        103024 non-null  datetime64[ns]\n 1   Time                        103024 non-null  object        \n 2   Booking_ID                  103024 non-null  object        \n 3   Booking_Status              103024 non-null  object        \n 4   Customer_ID                 103024 non-null  object        \n 5   Vehicle_Type                103024 non-null  object        \n 6   Pickup_Location             103024 non-null  object        \n 7   Drop_Location               103024 non-null  object        \n 8   V_TAT                       63967 non-null   float64       \n 9   C_TAT                       63967 non-null   float64       \n 10  Canceled_Rides_by_Customer  10499 non-null   object        \n 11  Canceled_Rides_by_Driver    18434 non-null   object        \n 12  Incomplete_Rides            63967 non-null   object        \n 13  Incomplete_Rides_Reason     3926 non-null    object        \n 14  Booking_Value               103024 non-null  int64         \n 15  Payment_Method              63967 non-null   object        \n 16  Ride_Distance               103024 non-null  int64         \n 17  Driver_Ratings              63967 non-null   float64       \n 18  Customer_Rating             63967 non-null   float64       \n 19  Vehicle Images              103024 non-null  object        \ndtypes: datetime64[ns](1), float64(4), int64(2), object(13)\nmemory usage: 15.7+ MB\n\n\n(Canceled_Rides_by_Driver\n Personal & Car related issue           6542\n Customer related issue                 5413\n Customer was coughing/sick             3654\n More than permitted people in there    2825\n Name: count, dtype: int64,\n Vehicle_Type\n Prime Sedan    14877\n eBike          14816\n Auto           14755\n Prime Plus     14707\n Bike           14662\n Prime SUV      14655\n Mini           14552\n Name: count, dtype: int64,\n Payment_Method\n Cash           35022\n UPI            25881\n Credit Card     2435\n Debit Card       629\n Name: count, dtype: int64,\n Booking_Status\n Success                 63967\n Canceled by Driver      18434\n Canceled by Customer    10499\n Driver Not Found        10124\n Name: count, dtype: int64)\n\n\n\n\n\n\nfrom sqlalchemy import create_engine as ce\nsql_eng  = ce('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = sql_eng.connect()\n\n\ndf_to_sql = df.to_sql('ola_july', con=conn, if_exists='replace', index=False)\n\n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\n\n\n\nRetrieve all successful bookings\n\n\n%%sql \nSELECT * FROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-25 22:20:00\n0 days 22:20:00\nCNR2940424040\nSuccess\nCID225428\nBike\nMagadi Road\nVarthur\n203.0\n30.0\nNone\nNone\nNo\nNone\n158\nCash\n13\n4.1\n4.0\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n2\n2024-07-02 09:02:00\n0 days 09:02:00\nCNR1797421769\nSuccess\nCID939555\nMini\nRajajinagar\nChamarajpet\n252.0\n80.0\nNone\nNone\nNo\nNone\n822\nCredit Card\n45\n4.0\n3.0\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n3\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n4\n2024-07-23 09:51:00\n0 days 09:51:00\nCNR3612067560\nSuccess\nCID476071\nBike\nTumkur Road\nWhitefield\n133.0\n40.0\nNone\nNone\nNo\nNone\n140\nCash\n49\n3.2\n4.5\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n63962\n2024-07-31 09:06:00\n0 days 09:06:00\nCNR9488489435\nSuccess\nCID371654\nPrime Plus\nRichmond Town\nVarthur\n245.0\n35.0\nNone\nNone\nNo\nNone\n111\nCash\n41\n3.6\n3.8\nhttps://cdn-icons-png.flaticon.com/128/11409/1...\n\n\n63963\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n63964\n2024-07-31 13:59:00\n0 days 13:59:00\nCNR1286151233\nSuccess\nCID113188\nPrime SUV\nBannerghatta Road\nJP Nagar\n35.0\n75.0\nNone\nNone\nNo\nNone\n2201\nCash\n37\n3.6\n3.2\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n63965\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n63966\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n63967 rows × 20 columns\n\n\n\n\n\nWhat is the average ride distance for each vehicle type?\n\n\n%%sql\nSELECT\nVehicle_Type,\nAVG(Ride_Distance) AS avg_dist\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_dist\n\n\n\n\n0\nPrime Sedan\n15.7649\n\n\n1\nBike\n15.5331\n\n\n2\nPrime SUV\n15.2745\n\n\n3\neBike\n15.5806\n\n\n4\nMini\n15.5101\n\n\n5\nPrime Plus\n15.4475\n\n\n6\nAuto\n6.2381\n\n\n\n\n\n\n\n\n\nWhat is the total number of cancelled rides by customers?\n\n\n%%sql \nSELECT \nCOUNT(Canceled_Rides_by_Customer) cnt\nFROM \nola_july;\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n10499\n\n\n\n\n\n\n\n\n\nWhat are the top 5 customers who booked the highest number of rides?\n\n\n%%sql\nSELECT \nCustomer_ID,\nCOUNT(Booking_ID)\nFROM ola_july\nGROUP BY Customer_ID\nORDER BY COUNT(Booking_ID) DESC\nLIMIT 5 ;\n\n\n\n\n\n\n\n\nCustomer_ID\nCOUNT(Booking_ID)\n\n\n\n\n0\nCID954071\n5\n\n\n1\nCID539191\n4\n\n\n2\nCID189965\n4\n\n\n3\nCID268274\n4\n\n\n4\nCID952434\n4\n\n\n\n\n\n\n\n\n\nWhat is the number of rides cancelled by drivers due to personal and car-related issues?\n\n\n%%sql\nSELECT \nCOUNT(*) AS cnt\nFROM ola_july\nWHERE Canceled_Rides_by_Driver = 'Personal & Car related issue';\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n6542\n\n\n\n\n\n\n\n\n\nWhat is the maximum and minimum driver ratings for Prime Sedan bookings?\n\n\n%%sql\nSELECT \nMAX(Driver_Ratings) AS max,\nMIN(Driver_Ratings) AS min\nFROM ola_july\nWHERE Vehicle_Type = 'Prime Sedan';\n\n\n\n\n\n\n\n\nmax\nmin\n\n\n\n\n0\n5.0\n3.0\n\n\n\n\n\n\n\n\n\nAll rides where payment was made using UPI.\n\n\n%%sql\nSELECT *\nFROM ola_july\nWHERE Payment_Method = 'UPI' ;\n\n\n\n\n\n\n\n\nDate\nTime\nBooking_ID\nBooking_Status\nCustomer_ID\nVehicle_Type\nPickup_Location\nDrop_Location\nV_TAT\nC_TAT\nCanceled_Rides_by_Customer\nCanceled_Rides_by_Driver\nIncomplete_Rides\nIncomplete_Rides_Reason\nBooking_Value\nPayment_Method\nRide_Distance\nDriver_Ratings\nCustomer_Rating\nVehicle Images\n\n\n\n\n0\n2024-07-30 19:59:00\n0 days 19:59:00\nCNR2982357879\nSuccess\nCID270156\nPrime SUV\nSahakar Nagar\nVarthur\n238.0\n130.0\nNone\nNone\nNo\nNone\n386\nUPI\n40\n4.2\n4.8\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n1\n2024-07-13 04:42:00\n0 days 04:42:00\nCNR8787177882\nSuccess\nCID802429\nMini\nKadugodi\nVijayanagar\n231.0\n90.0\nNone\nNone\nNo\nNone\n173\nUPI\n41\n3.4\n4.6\nhttps://cdn-icons-png.flaticon.com/128/3202/32...\n\n\n2\n2024-07-27 13:18:00\n0 days 13:18:00\nCNR4524472111\nSuccess\nCID540929\nAuto\nCox Town\nYelahanka\n126.0\n35.0\nNone\nNone\nNo\nNone\n330\nUPI\n8\n3.0\n4.8\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n3\n2024-07-16 09:54:00\n0 days 09:54:00\nCNR8181602032\nSuccess\nCID167642\nBike\nIndiranagar\nMG Road\n70.0\n95.0\nNone\nNone\nNo\nNone\n378\nUPI\n18\n4.8\n4.1\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n4\n2024-07-02 10:25:00\n0 days 10:25:00\nCNR8090918544\nSuccess\nCID640151\nBike\nMagadi Road\nHSR Layout\n126.0\n95.0\nNone\nNone\nNo\nNone\n343\nUPI\n23\n3.7\n3.6\nhttps://cdn-icons-png.flaticon.com/128/9983/99...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25876\n2024-07-31 19:34:00\n0 days 19:34:00\nCNR4870774895\nSuccess\nCID266336\nPrime Sedan\nMarathahalli\nCox Town\n189.0\n30.0\nNone\nNone\nNo\nNone\n280\nUPI\n38\n3.4\n4.1\nhttps://cdn-icons-png.flaticon.com/128/14183/1...\n\n\n25877\n2024-07-31 03:00:00\n0 days 03:00:00\nCNR9738039746\nSuccess\nCID922711\neBike\nChickpet\nRT Nagar\n42.0\n135.0\nNone\nNone\nNo\nNone\n310\nUPI\n7\n3.8\n3.3\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25878\n2024-07-31 15:12:00\n0 days 15:12:00\nCNR3151743100\nSuccess\nCID334158\nAuto\nVijayanagar\nRichmond Town\n84.0\n145.0\nNone\nNone\nNo\nNone\n1097\nUPI\n17\n4.3\n3.3\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n25879\n2024-07-31 14:56:00\n0 days 14:56:00\nCNR2027162035\nSuccess\nCID118301\neBike\nIndiranagar\nMagadi Road\n210.0\n140.0\nNone\nNone\nNo\nNone\n267\nUPI\n47\n3.4\n3.1\nhttps://cdn-icons-png.flaticon.com/128/6839/68...\n\n\n25880\n2024-07-31 13:57:00\n0 days 13:57:00\nCNR9770709721\nSuccess\nCID217959\nAuto\nUlsoor\nHennur\n175.0\n125.0\nNone\nNone\nNo\nNone\n462\nUPI\n3\n4.8\n4.4\nhttps://cdn-icons-png.flaticon.com/128/16526/1...\n\n\n\n\n25881 rows × 20 columns\n\n\n\n\n\nWhat is the average customer rating per vehicle type?\n\n\n%%sql\nSELECT \nVehicle_Type,\nROUND(AVG(Customer_Rating),2) AS avg_rating\nFROM ola_july\nGROUP BY Vehicle_Type;\n\n\n\n\n\n\n\n\nVehicle_Type\navg_rating\n\n\n\n\n0\nPrime Sedan\n4.00\n\n\n1\nBike\n3.99\n\n\n2\nPrime SUV\n4.00\n\n\n3\neBike\n3.99\n\n\n4\nMini\n4.00\n\n\n5\nPrime Plus\n4.01\n\n\n6\nAuto\n4.00\n\n\n\n\n\n\n\n\n\nWhat is the total booking value of rides completed successfully?\n\n\n%%sql \nSELECT \nSUM(Booking_Value) AS total_booking_val\nFROM ola_july \nWHERE Booking_Status = 'Success';\n\n\n\n\n\n\n\n\ntotal_booking_val\n\n\n\n\n0\n35080467\n\n\n\n\n\n\n\n\n\nAll incomplete rides along with the reason.\n\n\n%%sql \nSELECT \nCustomer_ID,\nBooking_ID,\nIncomplete_Rides_Reason\nFROM ola_july\nWHERE Incomplete_Rides = 'Yes';\n\n\n\n\n\n\n\n\nCustomer_ID\nBooking_ID\nIncomplete_Rides_Reason\n\n\n\n\n0\nCID296026\nCNR5176704322\nCustomer Demand\n\n\n1\nCID649563\nCNR9312632867\nVehicle Breakdown\n\n\n2\nCID517661\nCNR7924302885\nCustomer Demand\n\n\n3\nCID190281\nCNR1640228587\nOther Issue\n\n\n4\nCID526261\nCNR7623690602\nOther Issue\n\n\n...\n...\n...\n...\n\n\n3921\nCID118412\nCNR5546265534\nCustomer Demand\n\n\n3922\nCID771129\nCNR1954831907\nVehicle Breakdown\n\n\n3923\nCID112738\nCNR1271821250\nVehicle Breakdown\n\n\n3924\nCID382466\nCNR4652634649\nVehicle Breakdown\n\n\n3925\nCID406104\nCNR5427755403\nOther Issue\n\n\n\n\n3926 rows × 3 columns\n\n\n\nDownload the Power BI Dashboard"
  },
  {
    "objectID": "posts/Indian-Bikes-Market/index.html",
    "href": "posts/Indian-Bikes-Market/index.html",
    "title": "Indian Bikes Market Analysis",
    "section": "",
    "text": "Which Bike do Indians Prefers?\n\n\nProject Overview\nThis project analyzes the Indian bikes dataset using Python and SQL queries to extract valuable business insights. The dataset includes information on various motorcycle brands, models, engine specifications, pricing, and other key attributes. The analysis focuses on answering critical business questions related to sales trends, popular brands, engine capacities, and pricing distributions.\n\n\nImporting Neccessary Libraries\n\nimport kaggle as k \nimport pandas as pd \nimport kagglehub\nimport seaborn as sns \n\n\n\nDownloading the Dataset\n\nkagglehub.dataset_download(\"ak0212/indian-bike-sales-dataset\")\n\n\n\nBasic EDA\n\nbikes = pd.read_csv('bike_sales_india.csv')\nbikes.head()\n\n\n\n\n\n\n\n\nState\nAvg Daily Distance (km)\nBrand\nModel\nPrice (INR)\nYear of Manufacture\nEngine Capacity (cc)\nFuel Type\nMileage (km/l)\nOwner Type\nRegistration Year\nInsurance Status\nSeller Type\nResale Price (INR)\nCity Tier\n\n\n\n\n0\nKarnataka\n68.84\nRoyal Enfield\nHunter 350\n252816\n2021\n672\nElectric\n78.41\nSecond\n2024\nActive\nIndividual\n149934.18\nTier 3\n\n\n1\nRajasthan\n23.80\nBajaj\nDominar 400\n131100\n2020\n769\nHybrid\n89.98\nThird\n2023\nActive\nIndividual\n66960.30\nTier 3\n\n\n2\nMadhya Pradesh\n27.67\nKTM\n125 Duke\n201016\n2020\n216\nHybrid\n71.46\nSecond\n2023\nActive\nDealer\n141522.64\nTier 3\n\n\n3\nKarnataka\n62.85\nKawasaki\nNinja 300\n132482\n2021\n556\nPetrol\n51.73\nThird\n2021\nActive\nDealer\n56057.22\nTier 1\n\n\n4\nMadhya Pradesh\n10.62\nYamaha\nFZ V3\n231796\n2019\n298\nPetrol\n54.72\nThird\n2019\nNot Available\nIndividual\n132538.36\nTier 3\n\n\n\n\n\n\n\n\nbikes.info(), bikes.describe(), bikes.isnull().sum() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 15 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   State                    10000 non-null  object \n 1   Avg Daily Distance (km)  10000 non-null  float64\n 2   Brand                    10000 non-null  object \n 3   Model                    10000 non-null  object \n 4   Price (INR)              10000 non-null  int64  \n 5   Year of Manufacture      10000 non-null  int64  \n 6   Engine Capacity (cc)     10000 non-null  int64  \n 7   Fuel Type                10000 non-null  object \n 8   Mileage (km/l)           10000 non-null  float64\n 9   Owner Type               10000 non-null  object \n 10  Registration Year        10000 non-null  int64  \n 11  Insurance Status         10000 non-null  object \n 12  Seller Type              10000 non-null  object \n 13  Resale Price (INR)       10000 non-null  float64\n 14  City Tier                10000 non-null  object \ndtypes: float64(3), int64(4), object(8)\nmemory usage: 1.1+ MB\n\n\n(None,\n        Avg Daily Distance (km)    Price (INR)  Year of Manufacture  \\\n count             10000.000000   10000.000000         10000.000000   \n mean                 42.533128  224328.722400          2019.510500   \n std                  21.676985  100753.660447             2.907668   \n min                   5.010000   50031.000000          2015.000000   \n 25%                  23.907500  137900.250000          2017.000000   \n 50%                  42.480000  223878.000000          2019.000000   \n 75%                  61.352500  311464.250000          2022.000000   \n max                  80.000000  399981.000000          2024.000000   \n \n        Engine Capacity (cc)  Mileage (km/l)  Registration Year  \\\n count          10000.000000    10000.000000        10000.00000   \n mean             552.695300       67.188926         2020.96510   \n std              261.176292       20.891728            2.74897   \n min              100.000000       25.000000         2015.00000   \n 25%              327.000000       50.680000         2019.00000   \n 50%              553.000000       69.850000         2022.00000   \n 75%              780.000000       84.542500         2023.00000   \n max             1000.000000      100.000000         2024.00000   \n \n        Resale Price (INR)  \n count        10000.000000  \n mean        133828.973998  \n std          66613.220382  \n min          20532.070000  \n 25%          78680.905000  \n 50%         128148.340000  \n 75%         181048.192500  \n max         317302.450000  ,\n State                      0\n Avg Daily Distance (km)    0\n Brand                      0\n Model                      0\n Price (INR)                0\n Year of Manufacture        0\n Engine Capacity (cc)       0\n Fuel Type                  0\n Mileage (km/l)             0\n Owner Type                 0\n Registration Year          0\n Insurance Status           0\n Seller Type                0\n Resale Price (INR)         0\n City Tier                  0\n dtype: int64)\n\n\n\n\nData Preprocessing\n\nbikes.columns = bikes.columns.str.lower().str.replace(' ', '_')\nbikes.columns\n\nbikes.rename(columns={'avg_daily_distance_(km)':'avg_daily_distance','price_(inr)':'price_inr','resale_price_(inr)':'resale_price_inr'},inplace=True)\nbikes.rename(columns={'mileage_(km/l)':'mileage','engine_capacity_(cc)':'engine_capacity'},inplace=True)\n\n\n\nConnecting to Database\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\nbikes.to_sql('bikes',con=conn,if_exists='replace',index=False) \n\n%load_ext sql \n%sql mysql+pymysql://root:Karandeep2417@localhost/datawarehouseanalytics\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\nAnalysis (SQL Queries)\n\n\nWhat are the top-selling bike brands and models\n\n\n%%sql\nSELECT \nbrand,\nmodel,\nCOUNT(*) AS units_sold\nFROM bikes\nGROUP BY 1,2\nORDER BY 1 , 2 , 3 DESC;\n\n\n\n\n\n\n\n\nbrand\nmodel\nunits_sold\n\n\n\n\n0\nBajaj\nAvenger 220\n249\n\n\n1\nBajaj\nCT 100\n236\n\n\n2\nBajaj\nDominar 400\n233\n\n\n3\nBajaj\nPlatina 110\n228\n\n\n4\nBajaj\nPulsar 150\n261\n\n\n5\nHero\nGlamour\n258\n\n\n6\nHero\nHF Deluxe\n257\n\n\n7\nHero\nPassion Pro\n247\n\n\n8\nHero\nSplendor Plus\n228\n\n\n9\nHero\nXtreme 160R\n249\n\n\n10\nHonda\nActiva\n230\n\n\n11\nHonda\nCBR 650R\n248\n\n\n12\nHonda\nDio\n242\n\n\n13\nHonda\nShine\n244\n\n\n14\nHonda\nUnicorn\n257\n\n\n15\nKawasaki\nNinja 300\n256\n\n\n16\nKawasaki\nNinja 400\n255\n\n\n17\nKawasaki\nVersys 650\n261\n\n\n18\nKawasaki\nVulcan S\n267\n\n\n19\nKawasaki\nZ650\n252\n\n\n20\nKTM\n125 Duke\n231\n\n\n21\nKTM\n250 Duke\n269\n\n\n22\nKTM\n390 Adventure\n254\n\n\n23\nKTM\nDuke 200\n270\n\n\n24\nKTM\nRC 390\n248\n\n\n25\nRoyal Enfield\nClassic 350\n267\n\n\n26\nRoyal Enfield\nHimalayan\n249\n\n\n27\nRoyal Enfield\nHunter 350\n259\n\n\n28\nRoyal Enfield\nInterceptor 650\n264\n\n\n29\nRoyal Enfield\nMeteor 350\n214\n\n\n30\nTVS\nApache RTR 160\n227\n\n\n31\nTVS\nJupiter\n226\n\n\n32\nTVS\nNTorq 125\n271\n\n\n33\nTVS\nRonin\n252\n\n\n34\nTVS\nSport\n258\n\n\n35\nYamaha\nFascino 125\n248\n\n\n36\nYamaha\nFZ V3\n256\n\n\n37\nYamaha\nMT-15\n267\n\n\n38\nYamaha\nR15 V4\n233\n\n\n39\nYamaha\nRay ZR\n279\n\n\n\n\n\n\n\n\n\nWhat are the Brands Average Price(INR)\n\n\n%%sql \nSELECT \nbrand,\nmodel,\nROUND(AVG(price_inr),2) avg_price\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2,3 DESC;\n\n\n\n\n\n\n\n\nbrand\nmodel\navg_price\n\n\n\n\n0\nBajaj\nAvenger 220\n236263.02\n\n\n1\nBajaj\nCT 100\n229116.17\n\n\n2\nBajaj\nDominar 400\n219954.57\n\n\n3\nBajaj\nPlatina 110\n234069.37\n\n\n4\nBajaj\nPulsar 150\n233303.21\n\n\n5\nHero\nGlamour\n232147.26\n\n\n6\nHero\nHF Deluxe\n219995.73\n\n\n7\nHero\nPassion Pro\n221403.27\n\n\n8\nHero\nSplendor Plus\n236058.32\n\n\n9\nHero\nXtreme 160R\n221183.70\n\n\n10\nHonda\nActiva\n230481.32\n\n\n11\nHonda\nCBR 650R\n225379.57\n\n\n12\nHonda\nDio\n216609.00\n\n\n13\nHonda\nShine\n209988.51\n\n\n14\nHonda\nUnicorn\n223242.46\n\n\n15\nKawasaki\nNinja 300\n217552.12\n\n\n16\nKawasaki\nNinja 400\n221419.33\n\n\n17\nKawasaki\nVersys 650\n219403.90\n\n\n18\nKawasaki\nVulcan S\n231590.10\n\n\n19\nKawasaki\nZ650\n225589.97\n\n\n20\nKTM\n125 Duke\n222657.63\n\n\n21\nKTM\n250 Duke\n222430.67\n\n\n22\nKTM\n390 Adventure\n218125.41\n\n\n23\nKTM\nDuke 200\n225506.46\n\n\n24\nKTM\nRC 390\n224212.75\n\n\n25\nRoyal Enfield\nClassic 350\n219863.67\n\n\n26\nRoyal Enfield\nHimalayan\n214261.30\n\n\n27\nRoyal Enfield\nHunter 350\n233027.69\n\n\n28\nRoyal Enfield\nInterceptor 650\n222950.28\n\n\n29\nRoyal Enfield\nMeteor 350\n224339.43\n\n\n30\nTVS\nApache RTR 160\n207949.01\n\n\n31\nTVS\nJupiter\n232499.19\n\n\n32\nTVS\nNTorq 125\n217794.60\n\n\n33\nTVS\nRonin\n225114.23\n\n\n34\nTVS\nSport\n228783.99\n\n\n35\nYamaha\nFascino 125\n232287.48\n\n\n36\nYamaha\nFZ V3\n223681.22\n\n\n37\nYamaha\nMT-15\n227956.19\n\n\n38\nYamaha\nR15 V4\n219433.70\n\n\n39\nYamaha\nRay ZR\n225790.74\n\n\n\n\n\n\n\n\n\nWhat are the Fuel Types People Prefer the most with Average Price.\n\n\n%%sql \nSELECT \nfuel_type,\nCOUNT(*) count,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes \nGROUP BY 1\nORDER BY 2 DESC\n\n\n\n\n\n\n\n\nfuel_type\ncount\navg_price\n\n\n\n\n0\nHybrid\n3360\n225654\n\n\n1\nPetrol\n3357\n223561\n\n\n2\nElectric\n3283\n223757\n\n\n\n\n\n\n\n\n\nStates With Their Price Segment Preference\n\n\n%%sql\nSELECT \nstate,\nCASE\n    WHEN price_inr BETWEEN 50000 AND 100000 THEN 'Cheap'\n    WHEN price_inr BETWEEN 100000 AND 200000 THEN 'Expensive'\n    ELSE 'Premium'\nEND AS price_category,\nCOUNT(*) units_sold\nFROM bikes\nGROUP BY 1,2 \nORDER BY 1 \n\n\n\n\n\n\n\n\nstate\nprice_category\nunits_sold\n\n\n\n\n0\nDelhi\nCheap\n147\n\n\n1\nDelhi\nExpensive\n262\n\n\n2\nDelhi\nPremium\n568\n\n\n3\nGujarat\nCheap\n135\n\n\n4\nGujarat\nExpensive\n279\n\n\n5\nGujarat\nPremium\n588\n\n\n6\nKarnataka\nCheap\n139\n\n\n7\nKarnataka\nExpensive\n272\n\n\n8\nKarnataka\nPremium\n571\n\n\n9\nMadhya Pradesh\nCheap\n131\n\n\n10\nMadhya Pradesh\nExpensive\n319\n\n\n11\nMadhya Pradesh\nPremium\n523\n\n\n12\nMaharashtra\nCheap\n139\n\n\n13\nMaharashtra\nExpensive\n311\n\n\n14\nMaharashtra\nPremium\n580\n\n\n15\nPunjab\nCheap\n142\n\n\n16\nPunjab\nExpensive\n306\n\n\n17\nPunjab\nPremium\n603\n\n\n18\nRajasthan\nCheap\n151\n\n\n19\nRajasthan\nExpensive\n313\n\n\n20\nRajasthan\nPremium\n553\n\n\n21\nTamil Nadu\nCheap\n146\n\n\n22\nTamil Nadu\nExpensive\n260\n\n\n23\nTamil Nadu\nPremium\n588\n\n\n24\nUttar Pradesh\nCheap\n134\n\n\n25\nUttar Pradesh\nExpensive\n290\n\n\n26\nUttar Pradesh\nPremium\n579\n\n\n27\nWest Bengal\nCheap\n146\n\n\n28\nWest Bengal\nExpensive\n274\n\n\n29\nWest Bengal\nPremium\n551\n\n\n\n\n\n\n\n\n\nWhat is the Depriciation Percentage of Bikes in City Tiers?\n\n\n%%sql \nWITH tier_price AS\n(SELECT \ncity_tier,\nROUND(AVG(price_inr),0) avg_bike_price,\nROUND(AVG(resale_price_inr),0) avg_bike_resale_price\nFROM bikes\nGROUP BY 1 \nORDER BY 1\n)\nSELECT \n*,\nROUND(((avg_bike_price-avg_bike_resale_price)/avg_bike_price) * 100,2) AS depreciation_percentage\nFROM tier_price\n\n\n\n\n\n\n\n\ncity_tier\navg_bike_price\navg_bike_resale_price\ndepreciation_percentage\n\n\n\n\n0\nMetro\n224238\n133491.0\n40.47\n\n\n1\nTier 1\n224701\n133587.0\n40.55\n\n\n2\nTier 2\n223199\n133443.0\n40.21\n\n\n3\nTier 3\n225144\n134739.0\n40.15\n\n\n\n\n\n\n\n\n\nWho is selling bikes and their average selling price.\n\n\n%%sql \nSELECT \nseller_type,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n\n\n\n\n\n\n\nseller_type\navg_selling_price\n\n\n\n\n0\nIndividual\n132875.0\n\n\n1\nDealer\n134770.0\n\n\n\n\n\n\n\n\n\nWhat is the Price Distribution with Insurance Status ?\n\n\n%%sql \nSELECT \ninsurance_status,\nCOUNT(*) units,\nROUND(AVG(price_inr),0) avg_price,\nROUND(AVG(resale_price_inr),0) avg_selling_price\nFROM bikes\nGROUP BY 1\n\n\n\n\n\n\n\n\ninsurance_status\nunits\navg_price\navg_selling_price\n\n\n\n\n0\nActive\n3321\n225597\n133795.0\n\n\n1\nNot Available\n3250\n221518\n132488.0\n\n\n2\nExpired\n3429\n225765\n135133.0\n\n\n\n\n\n\n\n\n\nWhat are the States Bike Distibution with their Average price and Most Expensive Bike Price ?\n\n\n%%sql\nSELECT \nstate,\nCOUNT(*) bikes_sold,\nAVG(price_inr) avg_bike_price,\nMAX(price_inr) highest_bike_price\nFROM bikes\nGROUP BY 1\nORDER BY 2 DESC ,4 DESC \n\n\n\n\n\n\n\n\nstate\nbikes_sold\navg_bike_price\nhighest_bike_price\n\n\n\n\n0\nPunjab\n1051\n226566.1361\n399689\n\n\n1\nMaharashtra\n1030\n220031.6515\n399253\n\n\n2\nRajasthan\n1017\n220819.9302\n399730\n\n\n3\nUttar Pradesh\n1003\n227511.1027\n399456\n\n\n4\nGujarat\n1002\n226440.6477\n399909\n\n\n5\nTamil Nadu\n994\n226715.3803\n399395\n\n\n6\nKarnataka\n982\n225220.2515\n399791\n\n\n7\nDelhi\n977\n228109.7861\n399947\n\n\n8\nMadhya Pradesh\n973\n219936.9435\n399981\n\n\n9\nWest Bengal\n971\n221925.1267\n399829\n\n\n\n\n\n\n\n\n\nWhat are the Engine Preference in CC by States ?\n\n\n%%sql \nSELECT \nstate,\nROUND(AVG(engine_capacity),0) as engine_capacity\nFROM bikes\nGROUP BY 1 \n\n\n\n\n\n\n\n\nstate\nengine_capacity\n\n\n\n\n0\nKarnataka\n552\n\n\n1\nRajasthan\n554\n\n\n2\nMadhya Pradesh\n556\n\n\n3\nMaharashtra\n559\n\n\n4\nTamil Nadu\n548\n\n\n5\nPunjab\n554\n\n\n6\nGujarat\n539\n\n\n7\nUttar Pradesh\n550\n\n\n8\nDelhi\n555\n\n\n9\nWest Bengal\n560\n\n\n\n\n\n\n\n\n\nWhat is the Brand and Models with their Average Mileage and Average Engine Capacity ?\n\n\n%%sql \nSELECT\nbrand,\nmodel,\nROUND(AVG(mileage),0) avg_mileage_kmpl,\nROUND(AVG(engine_capacity),2) avg_engine_capacity_cc,\nROUND(AVG(price_inr),0) avg_price\nFROM bikes\nGROUP BY 1 ,2\n\n\n\n\n\n\n\n\nbrand\nmodel\navg_mileage_kmpl\navg_engine_capacity_cc\navg_price\n\n\n\n\n0\nRoyal Enfield\nHunter 350\n69.0\n579.65\n233028\n\n\n1\nBajaj\nDominar 400\n66.0\n507.56\n219955\n\n\n2\nKTM\n125 Duke\n68.0\n566.45\n222658\n\n\n3\nKawasaki\nNinja 300\n65.0\n570.05\n217552\n\n\n4\nYamaha\nFZ V3\n67.0\n538.81\n223681\n\n\n5\nHero\nSplendor Plus\n69.0\n543.76\n236058\n\n\n6\nRoyal Enfield\nMeteor 350\n67.0\n555.32\n224339\n\n\n7\nKawasaki\nVulcan S\n69.0\n553.16\n231590\n\n\n8\nKTM\n390 Adventure\n67.0\n562.12\n218125\n\n\n9\nHero\nHF Deluxe\n64.0\n548.51\n219996\n\n\n10\nTVS\nJupiter\n67.0\n540.27\n232499\n\n\n11\nKawasaki\nZ650\n68.0\n550.19\n225590\n\n\n12\nYamaha\nFascino 125\n67.0\n570.58\n232287\n\n\n13\nHero\nXtreme 160R\n69.0\n559.36\n221184\n\n\n14\nKawasaki\nVersys 650\n69.0\n565.49\n219404\n\n\n15\nHero\nGlamour\n68.0\n564.24\n232147\n\n\n16\nYamaha\nMT-15\n68.0\n556.87\n227956\n\n\n17\nHonda\nActiva\n66.0\n528.47\n230481\n\n\n18\nYamaha\nRay ZR\n67.0\n573.60\n225791\n\n\n19\nBajaj\nAvenger 220\n67.0\n556.97\n236263\n\n\n20\nHero\nPassion Pro\n67.0\n555.51\n221403\n\n\n21\nTVS\nNTorq 125\n71.0\n555.60\n217795\n\n\n22\nYamaha\nR15 V4\n66.0\n549.16\n219434\n\n\n23\nHonda\nUnicorn\n71.0\n544.38\n223242\n\n\n24\nTVS\nRonin\n67.0\n566.01\n225114\n\n\n25\nBajaj\nPlatina 110\n67.0\n557.10\n234069\n\n\n26\nBajaj\nPulsar 150\n69.0\n545.14\n233303\n\n\n27\nKTM\nDuke 200\n67.0\n537.74\n225506\n\n\n28\nHonda\nShine\n65.0\n558.97\n209989\n\n\n29\nRoyal Enfield\nClassic 350\n65.0\n567.46\n219864\n\n\n30\nHonda\nDio\n65.0\n556.07\n216609\n\n\n31\nTVS\nSport\n66.0\n544.22\n228784\n\n\n32\nKawasaki\nNinja 400\n64.0\n553.91\n221419\n\n\n33\nTVS\nApache RTR 160\n68.0\n535.49\n207949\n\n\n34\nKTM\nRC 390\n68.0\n540.78\n224213\n\n\n35\nRoyal Enfield\nInterceptor 650\n67.0\n520.73\n222950\n\n\n36\nHonda\nCBR 650R\n67.0\n560.89\n225380\n\n\n37\nBajaj\nCT 100\n68.0\n572.22\n229116\n\n\n38\nKTM\n250 Duke\n67.0\n534.99\n222431\n\n\n39\nRoyal Enfield\nHimalayan\n65.0\n553.59\n214261\n\n\n\n\n\n\n\n\n\nHow much bike model of each brand travels in each day.\n\n\n%%sql\nSELECT\nbrand,\nmodel,\nROUND(AVG(avg_daily_distance),2) daily_distance_km\nFROM bikes\nGROUP BY 1 ,2\nORDER BY 1\n\n\n\n\n\n\n\n\nbrand\nmodel\ndaily_distance_km\n\n\n\n\n0\nBajaj\nAvenger 220\n41.68\n\n\n1\nBajaj\nCT 100\n40.95\n\n\n2\nBajaj\nDominar 400\n42.28\n\n\n3\nBajaj\nPlatina 110\n41.38\n\n\n4\nBajaj\nPulsar 150\n41.94\n\n\n5\nHero\nGlamour\n42.33\n\n\n6\nHero\nHF Deluxe\n42.77\n\n\n7\nHero\nPassion Pro\n45.13\n\n\n8\nHero\nSplendor Plus\n41.87\n\n\n9\nHero\nXtreme 160R\n43.19\n\n\n10\nHonda\nActiva\n41.54\n\n\n11\nHonda\nCBR 650R\n43.24\n\n\n12\nHonda\nDio\n42.29\n\n\n13\nHonda\nShine\n42.41\n\n\n14\nHonda\nUnicorn\n43.90\n\n\n15\nKawasaki\nNinja 300\n44.55\n\n\n16\nKawasaki\nNinja 400\n41.79\n\n\n17\nKawasaki\nVersys 650\n43.25\n\n\n18\nKawasaki\nVulcan S\n40.85\n\n\n19\nKawasaki\nZ650\n43.71\n\n\n20\nKTM\n125 Duke\n41.68\n\n\n21\nKTM\n250 Duke\n40.79\n\n\n22\nKTM\n390 Adventure\n44.15\n\n\n23\nKTM\nDuke 200\n42.49\n\n\n24\nKTM\nRC 390\n40.64\n\n\n25\nRoyal Enfield\nClassic 350\n42.30\n\n\n26\nRoyal Enfield\nHimalayan\n42.84\n\n\n27\nRoyal Enfield\nHunter 350\n43.70\n\n\n28\nRoyal Enfield\nInterceptor 650\n41.83\n\n\n29\nRoyal Enfield\nMeteor 350\n45.46\n\n\n30\nTVS\nApache RTR 160\n41.11\n\n\n31\nTVS\nJupiter\n41.61\n\n\n32\nTVS\nNTorq 125\n43.31\n\n\n33\nTVS\nRonin\n42.63\n\n\n34\nTVS\nSport\n42.69\n\n\n35\nYamaha\nFascino 125\n43.30\n\n\n36\nYamaha\nFZ V3\n42.90\n\n\n37\nYamaha\nMT-15\n41.52\n\n\n38\nYamaha\nR15 V4\n43.00\n\n\n39\nYamaha\nRay ZR\n42.32\n\n\n\n\n\n\n\n\n\nWhat is the Best Performing Year Revenue Wise by each Brand ?\n\n\n%%sql\nWITH Revenue_Brand AS \n(SELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n),\nyear_ranked AS \n(SELECT \n* , \nRANK() OVER(PARTITION BY brand ORDER BY revenue_inr DESC) as ranking\nFROM Revenue_Brand\n)\nSELECT * FROM year_ranked WHERE ranking = 1\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\nranking\n\n\n\n\n0\nBajaj\n2024\n57982456.0000\n1\n\n\n1\nHero\n2024\n67174614.0000\n1\n\n\n2\nHonda\n2024\n58437509.0000\n1\n\n\n3\nKawasaki\n2024\n71845334.0000\n1\n\n\n4\nKTM\n2024\n69337919.0000\n1\n\n\n5\nRoyal Enfield\n2024\n61471090.0000\n1\n\n\n6\nTVS\n2024\n63856187.0000\n1\n\n\n7\nYamaha\n2024\n62200342.0000\n1\n\n\n\n\n\n\n\n\n\nWhat is the Revenue of each Brand per Year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) * AVG(price_inr) revenue_inr\nFROM bikes\nGROUP BY 1,2\nORDER BY 1,2\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nrevenue_inr\n\n\n\n\n0\nBajaj\n2015\n12705702.0000\n\n\n1\nBajaj\n2016\n13691874.0000\n\n\n2\nBajaj\n2017\n19455306.0000\n\n\n3\nBajaj\n2018\n21464659.0000\n\n\n4\nBajaj\n2019\n21280809.0000\n\n\n5\nBajaj\n2020\n24776346.0000\n\n\n6\nBajaj\n2021\n26770708.0000\n\n\n7\nBajaj\n2022\n34429187.0000\n\n\n8\nBajaj\n2023\n45853229.0000\n\n\n9\nBajaj\n2024\n57982456.0000\n\n\n10\nHero\n2015\n11773585.0000\n\n\n11\nHero\n2016\n14051936.0000\n\n\n12\nHero\n2017\n15159928.0000\n\n\n13\nHero\n2018\n14248666.0000\n\n\n14\nHero\n2019\n22453875.0000\n\n\n15\nHero\n2020\n23358010.0000\n\n\n16\nHero\n2021\n25269434.0000\n\n\n17\nHero\n2022\n38528366.0000\n\n\n18\nHero\n2023\n47997131.0000\n\n\n19\nHero\n2024\n67174614.0000\n\n\n20\nHonda\n2015\n10835149.0000\n\n\n21\nHonda\n2016\n13074250.0000\n\n\n22\nHonda\n2017\n15891562.0000\n\n\n23\nHonda\n2018\n16161945.0000\n\n\n24\nHonda\n2019\n23517179.0000\n\n\n25\nHonda\n2020\n25580464.0000\n\n\n26\nHonda\n2021\n29066031.0000\n\n\n27\nHonda\n2022\n34340051.0000\n\n\n28\nHonda\n2023\n43030583.0000\n\n\n29\nHonda\n2024\n58437509.0000\n\n\n30\nKawasaki\n2015\n15668191.0000\n\n\n31\nKawasaki\n2016\n9604010.0000\n\n\n32\nKawasaki\n2017\n17227399.0000\n\n\n33\nKawasaki\n2018\n16687188.0000\n\n\n34\nKawasaki\n2019\n24235410.0000\n\n\n35\nKawasaki\n2020\n25094472.0000\n\n\n36\nKawasaki\n2021\n30160213.0000\n\n\n37\nKawasaki\n2022\n35094953.0000\n\n\n38\nKawasaki\n2023\n42485748.0000\n\n\n39\nKawasaki\n2024\n71845334.0000\n\n\n40\nKTM\n2015\n9670746.0000\n\n\n41\nKTM\n2016\n13439731.0000\n\n\n42\nKTM\n2017\n14079433.0000\n\n\n43\nKTM\n2018\n20744460.0000\n\n\n44\nKTM\n2019\n24247508.0000\n\n\n45\nKTM\n2020\n25642272.0000\n\n\n46\nKTM\n2021\n27039079.0000\n\n\n47\nKTM\n2022\n34301426.0000\n\n\n48\nKTM\n2023\n44660548.0000\n\n\n49\nKTM\n2024\n69337919.0000\n\n\n50\nRoyal Enfield\n2015\n13021717.0000\n\n\n51\nRoyal Enfield\n2016\n14216805.0000\n\n\n52\nRoyal Enfield\n2017\n18166570.0000\n\n\n53\nRoyal Enfield\n2018\n18423327.0000\n\n\n54\nRoyal Enfield\n2019\n15885920.0000\n\n\n55\nRoyal Enfield\n2020\n20678910.0000\n\n\n56\nRoyal Enfield\n2021\n33558439.0000\n\n\n57\nRoyal Enfield\n2022\n34743002.0000\n\n\n58\nRoyal Enfield\n2023\n49110568.0000\n\n\n59\nRoyal Enfield\n2024\n61471090.0000\n\n\n60\nTVS\n2015\n11494553.0000\n\n\n61\nTVS\n2016\n17448136.0000\n\n\n62\nTVS\n2017\n18445540.0000\n\n\n63\nTVS\n2018\n15096315.0000\n\n\n64\nTVS\n2019\n22996130.0000\n\n\n65\nTVS\n2020\n22266686.0000\n\n\n66\nTVS\n2021\n26270255.0000\n\n\n67\nTVS\n2022\n34431906.0000\n\n\n68\nTVS\n2023\n42220926.0000\n\n\n69\nTVS\n2024\n63856187.0000\n\n\n70\nYamaha\n2015\n12525661.0000\n\n\n71\nYamaha\n2016\n13610480.0000\n\n\n72\nYamaha\n2017\n17534159.0000\n\n\n73\nYamaha\n2018\n18385285.0000\n\n\n74\nYamaha\n2019\n24000188.0000\n\n\n75\nYamaha\n2020\n25209581.0000\n\n\n76\nYamaha\n2021\n30673557.0000\n\n\n77\nYamaha\n2022\n37112687.0000\n\n\n78\nYamaha\n2023\n48605718.0000\n\n\n79\nYamaha\n2024\n62200342.0000\n\n\n\n\n\n\n\n\n\nWhat are the Units Sold by Each Brands each year ?\n\n\n%%sql\nSELECT \nbrand,\nregistration_year,\nCOUNT(*) units\nFROM bikes\nGROUP BY 1 ,2 \nORDER BY 1,2 DESC\n\n\n\n\n\n\n\n\nbrand\nregistration_year\nunits\n\n\n\n\n0\nBajaj\n2024\n255\n\n\n1\nBajaj\n2023\n211\n\n\n2\nBajaj\n2022\n145\n\n\n3\nBajaj\n2021\n117\n\n\n4\nBajaj\n2020\n101\n\n\n5\nBajaj\n2019\n94\n\n\n6\nBajaj\n2018\n93\n\n\n7\nBajaj\n2017\n78\n\n\n8\nBajaj\n2016\n59\n\n\n9\nBajaj\n2015\n54\n\n\n10\nHero\n2024\n299\n\n\n11\nHero\n2023\n216\n\n\n12\nHero\n2022\n169\n\n\n13\nHero\n2021\n112\n\n\n14\nHero\n2020\n105\n\n\n15\nHero\n2019\n97\n\n\n16\nHero\n2018\n59\n\n\n17\nHero\n2017\n65\n\n\n18\nHero\n2016\n64\n\n\n19\nHero\n2015\n53\n\n\n20\nHonda\n2024\n266\n\n\n21\nHonda\n2023\n196\n\n\n22\nHonda\n2022\n161\n\n\n23\nHonda\n2021\n125\n\n\n24\nHonda\n2020\n120\n\n\n25\nHonda\n2019\n94\n\n\n26\nHonda\n2018\n72\n\n\n27\nHonda\n2017\n75\n\n\n28\nHonda\n2016\n62\n\n\n29\nHonda\n2015\n50\n\n\n30\nKawasaki\n2024\n323\n\n\n31\nKawasaki\n2023\n196\n\n\n32\nKawasaki\n2022\n161\n\n\n33\nKawasaki\n2021\n139\n\n\n34\nKawasaki\n2020\n112\n\n\n35\nKawasaki\n2019\n99\n\n\n36\nKawasaki\n2018\n72\n\n\n37\nKawasaki\n2017\n75\n\n\n38\nKawasaki\n2016\n47\n\n\n39\nKawasaki\n2015\n67\n\n\n40\nKTM\n2024\n307\n\n\n41\nKTM\n2023\n192\n\n\n42\nKTM\n2022\n153\n\n\n43\nKTM\n2021\n123\n\n\n44\nKTM\n2020\n111\n\n\n45\nKTM\n2019\n116\n\n\n46\nKTM\n2018\n93\n\n\n47\nKTM\n2017\n70\n\n\n48\nKTM\n2016\n60\n\n\n49\nKTM\n2015\n47\n\n\n50\nRoyal Enfield\n2024\n279\n\n\n51\nRoyal Enfield\n2023\n216\n\n\n52\nRoyal Enfield\n2022\n152\n\n\n53\nRoyal Enfield\n2021\n150\n\n\n54\nRoyal Enfield\n2020\n101\n\n\n55\nRoyal Enfield\n2019\n78\n\n\n56\nRoyal Enfield\n2018\n77\n\n\n57\nRoyal Enfield\n2017\n78\n\n\n58\nRoyal Enfield\n2016\n63\n\n\n59\nRoyal Enfield\n2015\n59\n\n\n60\nTVS\n2024\n285\n\n\n61\nTVS\n2023\n192\n\n\n62\nTVS\n2022\n160\n\n\n63\nTVS\n2021\n120\n\n\n64\nTVS\n2020\n92\n\n\n65\nTVS\n2019\n109\n\n\n66\nTVS\n2018\n72\n\n\n67\nTVS\n2017\n79\n\n\n68\nTVS\n2016\n73\n\n\n69\nTVS\n2015\n52\n\n\n70\nYamaha\n2024\n282\n\n\n71\nYamaha\n2023\n209\n\n\n72\nYamaha\n2022\n164\n\n\n73\nYamaha\n2021\n133\n\n\n74\nYamaha\n2020\n114\n\n\n75\nYamaha\n2019\n107\n\n\n76\nYamaha\n2018\n81\n\n\n77\nYamaha\n2017\n76\n\n\n78\nYamaha\n2016\n61\n\n\n79\nYamaha\n2015\n56\n\n\n\n\n\n\n\n\n\nHow many new units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type = 'First'\nGROUP BY 1\n\n\n\n\n\n\n\n\nbrand\nunits\n\n\n\n\n0\nHero\n411\n\n\n1\nRoyal Enfield\n419\n\n\n2\nTVS\n414\n\n\n3\nKawasaki\n457\n\n\n4\nYamaha\n458\n\n\n5\nBajaj\n415\n\n\n6\nHonda\n405\n\n\n7\nKTM\n428\n\n\n\n\n\n\n\n\n\nHow many old units are sold by each brands ?\n\n\n%%sql \nSELECT \nbrand,\nCOUNT(*) units\nFROM bikes\nWHERE owner_type &lt;&gt; 'First'\nGROUP BY 1\n\n\n\n\n\n\n\n\nbrand\nunits\n\n\n\n\n0\nRoyal Enfield\n834\n\n\n1\nBajaj\n792\n\n\n2\nKTM\n844\n\n\n3\nKawasaki\n834\n\n\n4\nYamaha\n825\n\n\n5\nHero\n828\n\n\n6\nHonda\n816\n\n\n7\nTVS\n820\n\n\n\n\n\n\n\n\n\nFindings & Business Recommendations\n\nMarket Leaders: Brands like Royal Enfield and Bajaj dominate the market with a high number of models.\nCustomer Preferences: Most buyers prefer bikes with an engine capacity between 100-250cc due to affordability and fuel efficiency.\nPremium Segment: High-end bikes (above 500cc) are priced significantly higher but offer superior power and performance.\nBest Value: Some mid-range bikes provide excellent power-to-price ratios, making them ideal choices for performance-focused consumers.\n\n\n\nConclusion\nThis project demonstrates the power of SQL in extracting meaningful business insights from raw data. The analysis helps stakeholders understand customer preferences, market trends, and pricing strategies in the Indian motorcycle industry."
  },
  {
    "objectID": "posts/Apple-Sales/index.html",
    "href": "posts/Apple-Sales/index.html",
    "title": "Apple Sales & Warranty Analysis",
    "section": "",
    "text": "Project Overview\nThis project analyzes Apple’s sales, product, store, and warranty data using Advanced SQL queries. The dataset contains over 1 million records across multiple tables, including:\n\nSales 🛒\nProducts 📱\nCategories 🎯\nWarranty Claims 🛠️\nStores 🏬\n\nBy leveraging complex SQL queries, we extract key business insights, such as store performance, product demand, warranty claim trends, and year-over-year sales growth.\n\n\nDataset Structure\n\n\n\n\n\n\n\nTable Name\nDescription\n\n\n\n\nsales\nRecords of all product sales including date, store, quantity, and revenue.\n\n\nproducts\nList of all Apple products with their specifications and pricing.\n\n\ncategories\nClassification of products into different categories.\n\n\nwarranty\nDetails of all warranty claims, including status and resolution.\n\n\nstores\nInformation on Apple store locations worldwide.\n\n\n\n\n\nData Preprocessing & EDA\n\nimport pandas as pd \n\nsales = pd.read_csv('sales.csv')\nproducts = pd.read_csv('products.csv')\nstores = pd.read_csv('stores.csv')\ncategories = pd.read_csv('categories.csv')\nwarranty = pd.read_csv('warranty.csv')\n\nsales.head(), products.head(), stores.head(), categories.head(), warranty.head()\n\n(   sale_id   sale_date  store_id  product_id  quantity\n 0        1  2022-03-29        27         263         1\n 1        2  2022-10-04        36         336         3\n 2        3  2022-04-28        29         324         2\n 3        4  2024-04-02        38         322         4\n 4        5  2022-03-24        57         282         4,\n    product_id     product_name  category_id launch_date  price\n 0           1       Offer Many            7  2024-11-19   1072\n 1           2        Down Hair            4  2023-06-10   2021\n 2           3        World Its            8  2021-04-05   1496\n 3           4  Certain Improve            5  2024-01-03   2309\n 4           5    Audience Join            7  2021-12-28    795,\n    store_id                  store_name                city           country\n 0         1               Miller-Walker       Port Karlland         Sri Lanka\n 1         2      Peck, Hughes and Wolfe         South Jerry             Kenya\n 2         3               Valdez-Weaver  South Matthewburgh  Saint Barthelemy\n 3         4                Chan-Perkins       South Patrick            Zambia\n 4         5  Russell, Klein and Johnson           Lake Tina        Seychelles,\n    category_id category_name\n 0            1      Majority\n 1            2     Scientist\n 2            3            On\n 3            4          Free\n 4            5          Sure,\n    claim_id  claim_date  sale_id  repair_status\n 0         1  2023-09-16   108597  Paid Repaired\n 1         2  2023-01-13   850534  Paid Repaired\n 2         3  2022-03-14   610086  Paid Repaired\n 3         4  2024-06-07   600057  Paid Repaired\n 4         5  2024-10-21   326178  Paid Repaired)\n\n\n\nsales.shape, products.shape, stores.shape, categories.shape, warranty.shape\n\n((900000, 5), (500, 5), (100, 4), (10, 2), (100000, 4))\n\n\n\nsales.info(), products.info(), stores.info(), categories.info(), warranty.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 900000 entries, 0 to 899999\nData columns (total 5 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   sale_id     900000 non-null  int64 \n 1   sale_date   900000 non-null  object\n 2   store_id    900000 non-null  int64 \n 3   product_id  900000 non-null  int64 \n 4   quantity    900000 non-null  int64 \ndtypes: int64(4), object(1)\nmemory usage: 34.3+ MB\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 500 entries, 0 to 499\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   product_id    500 non-null    int64 \n 1   product_name  500 non-null    object\n 2   category_id   500 non-null    int64 \n 3   launch_date   500 non-null    object\n 4   price         500 non-null    int64 \ndtypes: int64(3), object(2)\nmemory usage: 19.7+ KB\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100 entries, 0 to 99\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   store_id    100 non-null    int64 \n 1   store_name  100 non-null    object\n 2   city        100 non-null    object\n 3   country     100 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 3.3+ KB\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 2 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   category_id    10 non-null     int64 \n 1   category_name  10 non-null     object\ndtypes: int64(1), object(1)\nmemory usage: 292.0+ bytes\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100000 entries, 0 to 99999\nData columns (total 4 columns):\n #   Column         Non-Null Count   Dtype \n---  ------         --------------   ----- \n 0   claim_id       100000 non-null  int64 \n 1   claim_date     100000 non-null  object\n 2   sale_id        100000 non-null  int64 \n 3   repair_status  100000 non-null  object\ndtypes: int64(2), object(2)\nmemory usage: 3.1+ MB\n\n\n(None, None, None, None, None)\n\n\n\n\nConnecting to Database\n\nfrom sqlalchemy import create_engine as ce \n\nengine = ce('mysql://root:Karandeep2417@localhost:3306/apple_db')\nconn = engine.connect()\n\ndf_to_sql = sales.to_sql('sales',con=conn,if_exists='replace',index=False)\ndf_to_sql = products.to_sql('products',con=conn,if_exists='replace',index=False)\ndf_to_sql = stores.to_sql('stores',con=conn,if_exists='replace',index=False)\ndf_to_sql = categories.to_sql('categories',con=conn,if_exists='replace',index=False)\ndf_to_sql = warranty.to_sql('warranty',con=conn,if_exists='replace',index=False)\n\n%load_ext sql \n%sql mysql://root:Karandeep2417@localhost/apple_db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = 0\n%config SqlMagic.displaycon = False\n\n\n\n\nAnalysis\n\n\nFind the number of stores in each country.\n\n\n%%sql \nSELECT \ncountry,\nCOUNT(store_id) AS cnt\nFROM stores\nGROUP BY country\nORDER BY COUNT(store_id) desc;\n\n\n\n\n\n\n\n\ncountry\ncnt\n\n\n\n\n0\nCote d'Ivoire\n3\n\n\n1\nLibyan Arab Jamahiriya\n2\n\n\n2\nKenya\n2\n\n\n3\nSaint Barthelemy\n2\n\n\n4\nZambia\n2\n\n\n...\n...\n...\n\n\n79\nVenezuela\n1\n\n\n80\nFrench Southern Territories\n1\n\n\n81\nUnited States Minor Outlying Islands\n1\n\n\n82\nCocos (Keeling) Islands\n1\n\n\n83\nGibraltar\n1\n\n\n\n\n84 rows × 2 columns\n\n\n\n\n\nCalculate the total number of units sold by each store.\n\n\n%%sql\nSELECT \ns.store_name,\nSUM(sl.quantity) AS units_sold\nFROM stores s JOIN sales sl \nON s.store_id = sl.store_id\nGROUP BY s.store_name;\n\n\n\n\n\n\n\n\nstore_name\nunits_sold\n\n\n\n\n0\nCunningham LLC\n22584\n\n\n1\nClark, Wilkinson and Flores\n23078\n\n\n2\nMonroe LLC\n22421\n\n\n3\nJohnson Ltd\n22814\n\n\n4\nSnyder-Everett\n21920\n\n\n...\n...\n...\n\n\n95\nBell Group\n21798\n\n\n96\nSimmons, Green and Oconnell\n22603\n\n\n97\nGoodman-Banks\n22838\n\n\n98\nWilliams-Mooney\n22328\n\n\n99\nWilliams Ltd\n22542\n\n\n\n\n100 rows × 2 columns\n\n\n\n\n\nIdentify how many sales occurred in December 2023.\n\n\n%%sql \nSELECT\n'December 2023' AS Date, \nSUM(quantity) sales\nFROM sales\nWHERE  MONTH(sale_date) = 12 AND YEAR(sale_date) = 2023 ;\n\n\n\n\n\n\n\n\nDate\nsales\n\n\n\n\n0\nDecember 2023\n63478\n\n\n\n\n\n\n\n\n\nDetermine how many stores have never had a warranty claim filed.\n\n\n%%sql \nSELECT COUNT(*) AS cnt FROM stores \nWHERE store_id NOT IN (\n                        SELECT DISTINCT store_id\n                        FROM sales s \n                        RIGHT JOIN warranty w \n                        ON s.sale_id = w.sale_id\n                        );\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n\nCalculate the percentage of warranty claims marked as “Warranty Void”.\n\n\n%%sql \nSELECT \n(COUNT(claim_id)/(SELECT COUNT(*) FROM warranty)) * 100 AS percentage\nFROM warranty\nWHERE repair_status = 'Warranty Void'\n\n\n\n\n\n\n\n\npercentage\n\n\n\n\n0\n19.9920\n\n\n\n\n\n\n\n\n\nIdentify which store had the highest total units sold in the last year.\n\n\n%%sql\nSELECT \ns.product_id,\nst.store_name,\nSUM(s.quantity) as units \nFROM sales s JOIN stores st\nON s.store_id = st.store_id\nWHERE YEAR(s.sale_date) = 2024\nGROUP BY s.product_id , st.store_name\nORDER BY SUM(s.quantity) DESC\nLIMIT 1;\n\n\n\n\n\n\n\n\nproduct_id\nstore_name\nunits\n\n\n\n\n0\n467\nWright-Allen\n50\n\n\n\n\n\n\n\n\n\nCount the number of unique products sold in the last year.\n\n\n%%sql\nSELECT\nCOUNT(DISTINCT product_id) AS unique_products\nFROM sales \nWHERE YEAR(sale_date) = 2024;\n\n\n\n\n\n\n\n\nunique_products\n\n\n\n\n0\n500\n\n\n\n\n\n\n\n\n\nFind the average price of products in each category.\n\n\n%%sql\nSELECT \np.category_id,\nc.category_name,\nAVG(p.price) AS avg_price\nFROM products p JOIN categories c \nON p.category_id = c.category_id\nGROUP BY p.category_id ,c.category_name ;\n\n\n\n\n\n\n\n\ncategory_id\ncategory_name\navg_price\n\n\n\n\n0\n7\nPlace\n1630.7818\n\n\n1\n4\nFree\n1545.6458\n\n\n2\n8\nEdge\n1673.8627\n\n\n3\n5\nSure\n1487.1020\n\n\n4\n10\nMarket\n1492.7222\n\n\n5\n3\nOn\n1435.8947\n\n\n6\n6\nAbove\n1764.8974\n\n\n7\n2\nScientist\n1745.3902\n\n\n8\n1\nMajority\n1619.5323\n\n\n9\n9\nRecord\n1560.1818\n\n\n\n\n\n\n\n\n\nHow many warranty claims were filed in 2022?\n\n\n%%sql\nSELECT COUNT(*) cnt\nFROM warranty\nWHERE YEAR(claim_date) = 2022\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n27837\n\n\n\n\n\n\n\n\n\nFor each store, identify the best-selling day based on highest quantity sold\n\n\n%%sql\nSELECT * \nFROM \n(SELECT \nstore_id,\nWEEKDAY(sale_date) day,\nSUM(quantity) units_sold,\nRANK() OVER(PARTITION BY store_id ORDER BY SUM(quantity) DESC) AS rnk\nFROM sales\nGROUP BY store_id,WEEKDAY(sale_date)\n) AS t1\nWHERE rnk = 1;\n\n\n\n\n\n\n\n\nstore_id\nday\nunits_sold\nrnk\n\n\n\n\n0\n1\n4\n3499\n1\n\n\n1\n2\n4\n3379\n1\n\n\n2\n3\n2\n3356\n1\n\n\n3\n4\n5\n3424\n1\n\n\n4\n5\n0\n3312\n1\n\n\n...\n...\n...\n...\n...\n\n\n95\n96\n6\n3357\n1\n\n\n96\n97\n2\n3410\n1\n\n\n97\n98\n4\n3361\n1\n\n\n98\n99\n3\n3322\n1\n\n\n99\n100\n5\n3404\n1\n\n\n\n\n100 rows × 4 columns\n\n\n\n\n\nIdentify the least selling product in each country for each year based on total units sold.\n\n\n%%sql\nWITH product_rank\nAS\n(SELECT \np.product_name,\nst.country,\nSUM(s.quantity) units_sold,\nRANK() OVER(PARTITION BY st.country ORDER BY SUM(s.quantity)) AS rnk\nFROM sales s JOIN products p \nON s.product_id = p.product_id\nJOIN stores st \nON s.store_id = st.store_id\nGROUP BY 2,1\n)\nSELECT *\nFROM product_rank\nWHERE rnk = 1;\n\n\n\n\n\n\n\n\nproduct_name\ncountry\nunits_sold\nrnk\n\n\n\n\n0\nFactor Research\nAfghanistan\n13\n1\n\n\n1\nPower Memory\nAlbania\n10\n1\n\n\n2\nFocus Reflect\nAntarctica (the territory South of 60 deg S)\n14\n1\n\n\n3\nRace Stock\nAruba\n14\n1\n\n\n4\nPhone Nothing\nAruba\n14\n1\n\n\n...\n...\n...\n...\n...\n\n\n90\nFocus Reflect\nVanuatu\n18\n1\n\n\n91\nIf Build\nVenezuela\n19\n1\n\n\n92\nAssume Serious\nWestern Sahara\n17\n1\n\n\n93\nRather Affect\nYemen\n48\n1\n\n\n94\nSurface Will\nZambia\n47\n1\n\n\n\n\n95 rows × 4 columns\n\n\n\n\n\nCalculate how many warranty claims were filed within 180 days of a product sale.\n\n\n%%sql\nWITH claims AS \n(SELECT \nw.*,\ns.sale_date,\nDATEDIFF(w.claim_date,s.sale_date) AS day_diff\nFROM warranty w\nLEFT JOIN sales s\nON w.sale_id = s.sale_id\nWHERE DATEDIFF(w.claim_date,s.sale_date) &gt; 0 AND DATEDIFF(w.claim_date,s.sale_date) &lt;=180\n)\nSELECT COUNT(*) AS cnt FROM claims\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n15049\n\n\n\n\n\n\n\n\n\nDetermine how many warranty claims were filed for products launched in the last two years.\n\n\n%%sql\nSELECT COUNT(w.claim_id) as cnt\nFROM warranty w \nJOIN sales s \nON w.sale_id = s.sale_id\nJOIN products p\nON s.product_id = p.product_id\nWHERE YEAR(p.launch_date) = 2022\n\n\n\n\n\n\n\n\ncnt\n\n\n\n\n0\n20319\n\n\n\n\n\n\n\n\n\nList the months in the last three years where sales exceeded 1,000 units in the USA.\n\n\n%%sql\nSELECT \nMONTH(s.sale_date) AS month,\nSUM(s.quantity) AS units\nFROM sales s\nJOIN stores st \nON s.store_id = st.store_id\nWHERE st.country = 'United States of America' \nAND YEAR(s.sale_date) IN (2024,2023,2022)\nGROUP BY MONTH(s.sale_date)\nHAVING SUM(s.quantity) &gt; 1000\n\n\n\nIdentify the product category with the most warranty claims filed in the last two years.\n\n\n%%sql\nSELECT \nct.category_name,\nCOUNT(w.claim_id) claims\nFROM warranty w \nLEFT JOIN sales s\nON w.sale_id = s.sale_id\nJOIN products p \nON p.product_id = s.product_id\nJOIN categories ct \nON ct.category_id = p.category_id\nWHERE YEAR(w.claim_date) IN(2023,2024) \nGROUP BY ct.category_name\nORDER BY 2 DESC\n\n\n\n\n\n\n\n\ncategory_name\nclaims\n\n\n\n\n0\nMajority\n8309\n\n\n1\nOn\n7614\n\n\n2\nPlace\n7577\n\n\n3\nMarket\n7207\n\n\n4\nEdge\n6637\n\n\n5\nSure\n6553\n\n\n6\nFree\n6442\n\n\n7\nRecord\n5867\n\n\n8\nScientist\n5375\n\n\n9\nAbove\n5195\n\n\n\n\n\n\n\n\n\nDetermine the percentage chance of receiving warranty claims after each purchase for each country.\n\n\n%%sql\nSELECT \ncountry,\n(total_units_sold/total_claims) * 100  AS claim_ratio\nFROM\n(SELECT \nst.country,\nSUM(s.quantity) total_units_sold,\nSUM(w.claim_id) total_claims\nFROM sales s\nJOIN stores st \nON s.store_id = st.store_id\nLEFT JOIN warranty w \nON s.sale_id = w.sale_id\nGROUP BY 1\n) t1\nGROUP BY 1\n\n\n\n\n\n\n\n\ncountry\nclaim_ratio\n\n\n\n\n0\nCongo\n0.0454\n\n\n1\nSaint Barthelemy\n0.0435\n\n\n2\nBritish Virgin Islands\n0.0427\n\n\n3\nTanzania\n0.0451\n\n\n4\nRussian Federation\n0.0449\n\n\n...\n...\n...\n\n\n79\nSaint Martin\n0.0432\n\n\n80\nZambia\n0.0450\n\n\n81\nTurks and Caicos Islands\n0.0453\n\n\n82\nLithuania\n0.0446\n\n\n83\nNiger\n0.0461\n\n\n\n\n84 rows × 2 columns\n\n\n\n\n\nAnalyze the year-by-year growth ratio for each store.\n\n\n%%sql\nWITH yearly_sales \nAS\n(SELECT \ns.store_id,\nst.store_name,\nYEAR(s.sale_date) as year,\nSUM(s.quantity * p.price) as current_year_sales\nFROM sales s \nJOIN products p\nON s.product_id = p.product_id\nJOIN stores st \nON st.store_id = s.store_id\nGROUP BY 1,2,3\nORDER BY 2,3 \n),\ngrowth_ratio \nAS\n(\nSELECT \nstore_id,\nstore_name,\nyear,\ncurrent_year_sales,\nLAG(current_year_sales,1) OVER(PARTITION BY store_name ORDER BY year) AS previous_year_sale\nFROM yearly_sales\n)\nSELECT\nstore_id,\nstore_name,\nyear,\ncurrent_year_sales,\nprevious_year_sale,\n((current_year_sales - previous_year_sale)/previous_year_sale) * 100 AS growth\nFROM growth_ratio\n\n\n\n\n\n\n\n\nstore_id\nstore_name\nyear\ncurrent_year_sales\nprevious_year_sale\ngrowth\n\n\n\n\n0\n66\nAdams and Sons\n2022\n10282506\nNone\nNone\n\n\n1\n66\nAdams and Sons\n2023\n12133014\n10282506\n17.9967\n\n\n2\n66\nAdams and Sons\n2024\n11869887\n12133014\n-2.1687\n\n\n3\n66\nAdams and Sons\n2025\n1860443\n11869887\n-84.3264\n\n\n4\n6\nAdams Ltd\n2022\n9844527\nNone\nNone\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n395\n26\nWu, Floyd and Clark\n2025\n1963779\n11696911\n-83.2111\n\n\n396\n84\nYoung Inc\n2022\n9588247\nNone\nNone\n\n\n397\n84\nYoung Inc\n2023\n11534997\n9588247\n20.3035\n\n\n398\n84\nYoung Inc\n2024\n11883712\n11534997\n3.0231\n\n\n399\n84\nYoung Inc\n2025\n1926618\n11883712\n-83.7877\n\n\n\n\n400 rows × 6 columns\n\n\n\n\n\nCalculate the correlation between product price and warranty claims for products sold in the last five years, segmented by price range\n\n\n%%sql\nWITH range_table AS \n(SELECT \np.product_id,\np.price,\nw.claim_id,\nCASE \n    WHEN p.price &lt; 500 THEN 'Cheap Product'\n    WHEN p.price BETWEEN 500 AND 1500 THEN 'Affordable Product'\n    ELSE 'Expensive'\n    END AS price_range\nFROM warranty w\nLEFT JOIN sales s \nON w.sale_id = s.sale_id\nJOIN products p \nON p.product_id = s.product_id\n)\nSELECT \nprice_range,\nCOUNT(claim_id) claims\nFROM range_table\nGROUP BY 1 \n\n\n\n\n\n\n\n\nprice_range\nclaims\n\n\n\n\n0\nExpensive\n53134\n\n\n1\nAffordable Product\n35609\n\n\n2\nCheap Product\n11257\n\n\n\n\n\n\n\n\n\nIdentify the store with the highest percentage of “Paid Repaired” claims relative to total claims filed.\n\n\n%%sql\nWITH claims_paid_repaired AS \n(SELECT \ns.store_id,\nCOUNT(*) paid_repaired \nFROM warranty w\nLEFT JOIN sales s \nON w.sale_id = s.sale_id\nWHERE w.repair_status = 'Paid Repaired'\nGROUP BY 1\n),\ntotal_claims AS \n(SELECT \ns.store_id,\nCOUNT(*) no_claims \nFROM warranty w\nLEFT JOIN sales s \nON w.sale_id = s.sale_id\nGROUP BY 1\n)\nSELECT \ntc.store_id,\npc.paid_repaired,\ntc.no_claims ,\n(pc.paid_repaired/tc.no_claims)*100 paid_claims_percentage\nFROM total_claims tc\nJOIN claims_paid_repaired pc\nON tc.store_id = pc.store_id\n\n\n\n\n\n\n\n\nstore_id\npaid_repaired\nno_claims\npaid_claims_percentage\n\n\n\n\n0\n77\n801\n1006\n79.6223\n\n\n1\n96\n763\n957\n79.7283\n\n\n2\n54\n795\n1007\n78.9474\n\n\n3\n47\n838\n1041\n80.4995\n\n\n4\n1\n783\n971\n80.6385\n\n\n...\n...\n...\n...\n...\n\n\n95\n92\n809\n1020\n79.3137\n\n\n96\n12\n771\n964\n79.9793\n\n\n97\n38\n832\n1006\n82.7038\n\n\n98\n76\n798\n998\n79.9599\n\n\n99\n45\n805\n1013\n79.4669\n\n\n\n\n100 rows × 4 columns\n\n\n\n\n\nWrite a query to calculate the monthly running total of sales for each store over the past four years and compare trends during this period.\n\n\n%%sql\nWITH monthly_sales AS \n(SELECT \ns.store_id,\nYEAR(s.sale_date) AS year,\nMONTH(s.sale_date) AS month,\nSUM(s.quantity * p.price) sales\nFROM sales s\nJOIN products p \nON s.product_id = p.product_id\nGROUP BY s.store_id ,YEAR(s.sale_date),MONTH(s.sale_date)\nORDER BY 1 ,2 ,3 \n)\nSELECT \nstore_id,\nyear,\nmonth,\nSUM(sales) OVER(PARTITION BY store_id ORDER BY year,month) AS running_total\nFROM monthly_sales\n\n\n\n\n\n\n\n\nstore_id\nyear\nmonth\nrunning_total\n\n\n\n\n0\n1\n2022\n3\n910190\n\n\n1\n1\n2022\n4\n1908425\n\n\n2\n1\n2022\n5\n3022207\n\n\n3\n1\n2022\n6\n3892525\n\n\n4\n1\n2022\n7\n4882024\n\n\n...\n...\n...\n...\n...\n\n\n3595\n100\n2024\n10\n32409712\n\n\n3596\n100\n2024\n11\n33456626\n\n\n3597\n100\n2024\n12\n34592094\n\n\n3598\n100\n2025\n1\n35609928\n\n\n3599\n100\n2025\n2\n36569147\n\n\n\n\n3600 rows × 4 columns\n\n\n\n\n\nNOTE  This Apple’s Dataset was generated by ChatGPT."
  },
  {
    "objectID": "posts/shopping-trends/index.html",
    "href": "posts/shopping-trends/index.html",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "",
    "text": "In this project, we will be analyzing the shopping behavior of customers in a retail store. We will be using SQL to extract the data from the database and then use Python to analyze the data. We will be using the Pandas library to perform the analysis.\n\n\n\n\nimport pandas as pd\nimport numpy as np \nimport duckdb as db\n\n\n\n\n\ndf = pd.read_csv('shopping_trends.csv')\ndf.head()\n\nshop = df.copy()\nshop.columns\nshop.info()\nshop.isna().sum()\nshop.describe()\n\nshop.columns = shop.columns.str.replace(' ', '_')\nshop.rename(columns={'Purchase_Amount_(USD)': 'Purchase_Amount_USD'}, inplace=True)\n\n\n\n\n\nfrom sqlalchemy import create_engine as ce\nengine = ce('mysql+pymysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\n\nshop.to_sql('shopping_trends', conn, if_exists='replace', index=False)\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nSELECT \nGender,\nAVG(Purchase_Amount_USD) AS avg_usd_spent,\nSUM(Purchase_Amount_USD) AS total_usd_spent\nFROM shopping_trends\nGROUP BY 1;\n\n\n\n\n\n\n\n\n\nGender\navg_usd_spent\ntotal_usd_spent\n\n\n\n\n0\nMale\n59.5362\n157890\n\n\n1\nFemale\n60.2492\n75191\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nCASE WHEN Age BETWEEN 18 AND 35 THEN \"Young\" \n     WHEN Age BETWEEN 35 AND 55 THEN \"Middle Age\"\n     ELSE \"Elderly\"\nEND AS age_group,\nCOUNT(*) AS customer_count,\nAVG(Purchase_Amount_USD) AS avg_usd_spent,\nSUM(Purchase_Amount_USD) AS total_usd_spent    \nfrom shopping_trends\nGROUP BY 1;\n\n\n\n\n\n\n\n\n\nage_group\ncustomer_count\navg_usd_spent\ntotal_usd_spent\n\n\n\n\n0\nMiddle Age\n1482\n59.9548\n88853\n\n\n1\nYoung\n1313\n60.1462\n78972\n\n\n2\nElderly\n1105\n59.0552\n65256\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nSELECT \nLocation,\nGender,\nSubscription_Status,\ncount(*) Customer_Count,\navg(Purchase_Amount_USD) Avg_Dollar_Spent\nfrom shopping_trends\ngroup by 1,2,3\nORDER BY 1 , 2 desc, 3 desc\n\n\n\n\n\n\n\n\n\nLocation\nGender\nSubscription_Status\nCustomer_Count\nAvg_Dollar_Spent\n\n\n\n\n0\nAlabama\nMale\nYes\n22\n63.4091\n\n\n1\nAlabama\nMale\nNo\n40\n54.7000\n\n\n2\nAlabama\nFemale\nNo\n27\n62.1481\n\n\n3\nAlaska\nMale\nYes\n18\n59.3889\n\n\n4\nAlaska\nMale\nNo\n30\n68.9333\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\nWisconsin\nMale\nNo\n37\n56.5405\n\n\n146\nWisconsin\nFemale\nNo\n25\n53.4000\n\n\n147\nWyoming\nMale\nYes\n20\n58.0000\n\n\n148\nWyoming\nMale\nNo\n31\n67.0323\n\n\n149\nWyoming\nFemale\nNo\n20\n53.5500\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nwith preferred_product as\n(select \nCASE WHEN Age BETWEEN 18 AND 35 THEN \"Young\" \n     WHEN Age BETWEEN 35 AND 55 THEN \"Middle Age\"\n     ELSE \"Elderly\"\nEND AS age_group,\nCategory,\nColor,\nCount(*) total_purchased_items\nfrom shopping_trends\ngroup by 1,2,3\norder by 1,2,4 desc),\nranked as \n(\nselect \n*,\nrank() over(partition by age_group, Category order by total_purchased_items desc) as rnk\nfrom  preferred_product\n)\nselect \nage_group,\nCategory,\nColor,\ntotal_purchased_items\nfrom ranked where rnk = 1;\n\n\n\n\n\n\n\n\n\nage_group\nCategory\nColor\ntotal_purchased_items\n\n\n\n\n0\nElderly\nAccessories\nOlive\n21\n\n\n1\nElderly\nClothing\nCharcoal\n30\n\n\n2\nElderly\nFootwear\nOlive\n9\n\n\n3\nElderly\nFootwear\nTurquoise\n9\n\n\n4\nElderly\nFootwear\nViolet\n9\n\n\n5\nElderly\nFootwear\nLavender\n9\n\n\n6\nElderly\nFootwear\nMaroon\n9\n\n\n7\nElderly\nOuterwear\nTeal\n9\n\n\n8\nMiddle Age\nAccessories\nPeach\n24\n\n\n9\nMiddle Age\nAccessories\nRed\n24\n\n\n10\nMiddle Age\nClothing\nViolet\n35\n\n\n11\nMiddle Age\nFootwear\nPink\n18\n\n\n12\nMiddle Age\nOuterwear\nGray\n11\n\n\n13\nYoung\nAccessories\nMagenta\n25\n\n\n14\nYoung\nClothing\nMaroon\n32\n\n\n15\nYoung\nFootwear\nYellow\n14\n\n\n16\nYoung\nOuterwear\nGreen\n7\n\n\n17\nYoung\nOuterwear\nCharcoal\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nCustomer_ID,\navg(Purchase_Amount_USD) avg_dollar_spent_per_transaction,\nsum(Previous_Purchases) previous_purchase\nfrom shopping_trends\ngroup by 1\norder by 3 desc\n\n\n\n\n\n\n\n\n\nCustomer_ID\navg_dollar_spent_per_transaction\nprevious_purchase\n\n\n\n\n0\n3257\n26.0000\n50\n\n\n1\n3262\n52.0000\n50\n\n\n2\n3394\n90.0000\n50\n\n\n3\n3436\n91.0000\n50\n\n\n4\n3438\n62.0000\n50\n\n\n...\n...\n...\n...\n\n\n3895\n3729\n31.0000\n1\n\n\n3896\n3792\n51.0000\n1\n\n\n3897\n3803\n72.0000\n1\n\n\n3898\n3865\n99.0000\n1\n\n\n3899\n3888\n34.0000\n1\n\n\n\n\n3900 rows × 3 columns\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nCategory,\navg(Purchase_Amount_USD) avg_dollar_spent\nfrom shopping_trends\ngroup by 1 \norder by 1\n\n\n\n\n\n\n\n\n\nCategory\navg_dollar_spent\n\n\n\n\n0\nAccessories\n59.8387\n\n\n1\nClothing\n60.0253\n\n\n2\nFootwear\n60.2554\n\n\n3\nOuterwear\n57.1728\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nItem_Purchased as Product_Type,\nsum(Purchase_Amount_USD) Revenue_Generated\nfrom shopping_trends\ngroup by 1 \norder by 2 desc\n\n\n\n\n\n\n\n\n\nProduct_Type\nRevenue_Generated\n\n\n\n\n0\nBlouse\n10410\n\n\n1\nShirt\n10332\n\n\n2\nDress\n10320\n\n\n3\nPants\n10090\n\n\n4\nJewelry\n10010\n\n\n5\nSunglasses\n9649\n\n\n6\nBelt\n9635\n\n\n7\nScarf\n9561\n\n\n8\nSweater\n9462\n\n\n9\nShorts\n9433\n\n\n10\nSkirt\n9402\n\n\n11\nHat\n9375\n\n\n12\nCoat\n9275\n\n\n13\nSocks\n9252\n\n\n14\nJacket\n9249\n\n\n15\nT-shirt\n9248\n\n\n16\nShoes\n9240\n\n\n17\nSandals\n9200\n\n\n18\nBoots\n9018\n\n\n19\nHandbag\n8857\n\n\n20\nHoodie\n8767\n\n\n21\nBackpack\n8636\n\n\n22\nSneakers\n8635\n\n\n23\nGloves\n8477\n\n\n24\nJeans\n7548\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nFrequency_of_Purchases,\nsum(Purchase_Amount_USD) Dollar_Spent\nfrom shopping_trends\ngroup by 1\norder by 2 desc; \n\n\n\n\n\n\n\n\n\nFrequency_of_Purchases\nDollar_Spent\n\n\n\n\n0\nEvery 3 Months\n35088\n\n\n1\nAnnually\n34419\n\n\n2\nQuarterly\n33771\n\n\n3\nBi-Weekly\n33200\n\n\n4\nMonthly\n32810\n\n\n5\nFortnightly\n32007\n\n\n6\nWeekly\n31786\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nPayment_Method,\ncount(*) count,\nsum(Purchase_Amount_USD) Total_Dollars_Spent\nfrom shopping_trends\ngroup by 1\norder by 1 desc,2 desc;\n\n\n\n\n\n\n\n\n\nPayment_Method\ncount\nTotal_Dollars_Spent\n\n\n\n\n0\nVenmo\n653\n39991\n\n\n1\nPayPal\n638\n37449\n\n\n2\nDebit Card\n633\n37118\n\n\n3\nCredit Card\n696\n42567\n\n\n4\nCash\n648\n38833\n\n\n5\nBank Transfer\n632\n37123\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nwith trends as \n(select \nSeason,\nItem_Purchased as Product,\ncount(*) Items_Purchased\nfrom shopping_trends\ngroup by 1,2\norder by 1,3 desc\n),\nranked as (\nselect \n*,\nrank() over(PARTITION BY Season order by Items_Purchased desc) as rnk\nfrom trends\n)\nselect Season,Product,Items_Purchased \nfrom ranked\nwhere rnk between 1 and 3;\n\n\n\n\n\n\n\n\n\nSeason\nProduct\nItems_Purchased\n\n\n\n\n0\nFall\nJacket\n54\n\n\n1\nFall\nHat\n50\n\n\n2\nFall\nHandbag\n48\n\n\n3\nSpring\nSweater\n52\n\n\n4\nSpring\nShorts\n47\n\n\n5\nSpring\nBlouse\n46\n\n\n6\nSpring\nCoat\n46\n\n\n7\nSpring\nSkirt\n46\n\n\n8\nSummer\nPants\n50\n\n\n9\nSummer\nJewelry\n47\n\n\n10\nSummer\nDress\n47\n\n\n11\nWinter\nSunglasses\n52\n\n\n12\nWinter\nPants\n51\n\n\n13\nWinter\nShirt\n50\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nDiscount_Applied,\nPromo_Code_Used ,\ncount(*) Count,\nsum(Purchase_Amount_USD) Sales,\navg(Purchase_Amount_USD) Avg_Dollar_Spent\nfrom shopping_trends\nGROUP BY 1,2\n\n\n\n\n\n\n\n\n\nDiscount_Applied\nPromo_Code_Used\nCount\nSales\nAvg_Dollar_Spent\n\n\n\n\n0\nYes\nYes\n1677\n99411\n59.2791\n\n\n1\nNo\nNo\n2223\n133670\n60.1305\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nSubscription_Status, \nGender,\ncount(*) Cust_Count,\navg(Purchase_Amount_USD) Avg_Dollar_Spent,\nsum(Purchase_Amount_USD) Revenue\nfrom shopping_trends\ngroup by 1,2\n\n\n\n\n\n\n\n\n\nSubscription_Status\nGender\nCust_Count\nAvg_Dollar_Spent\nRevenue\n\n\n\n\n0\nYes\nMale\n1053\n59.4919\n62645\n\n\n1\nNo\nMale\n1599\n59.5654\n95245\n\n\n2\nNo\nFemale\n1248\n60.2492\n75191\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect\nShipping_Type,\ncount(*) Count,\nsum(Purchase_Amount_USD) Total_Purchase_Value,\navg(Purchase_Amount_USD) Avg_Purchase_Value\nfrom shopping_trends\ngroup by 1 \norder by 3 desc;\n\n\n\n\n\n\n\n\n\nShipping_Type\nCount\nTotal_Purchase_Value\nAvg_Purchase_Value\n\n\n\n\n0\nFree Shipping\n675\n40777\n60.4104\n\n\n1\nExpress\n646\n39067\n60.4752\n\n\n2\nStore Pickup\n650\n38931\n59.8938\n\n\n3\nStandard\n654\n38233\n58.4602\n\n\n4\n2-Day Shipping\n627\n38080\n60.7337\n\n\n5\nNext Day Air\n648\n37993\n58.6312\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect\nCategory,\nItem_Purchased Product,\nround(avg(Review_Rating),2) Avg_Review ,\nAVG(Purchase_Amount_USD) avg_spent\nfrom shopping_trends\ngroup by 1,2\norder by 1,4 desc;\n\n\n\n\n\n\n\n\n\nCategory\nProduct\nAvg_Review\navg_spent\n\n\n\n\n0\nAccessories\nScarf\n3.70\n60.8981\n\n\n1\nAccessories\nHat\n3.81\n60.8766\n\n\n2\nAccessories\nGloves\n3.86\n60.5500\n\n\n3\nAccessories\nBackpack\n3.75\n60.3916\n\n\n4\nAccessories\nSunglasses\n3.74\n59.9317\n\n\n5\nAccessories\nBelt\n3.76\n59.8447\n\n\n6\nAccessories\nJewelry\n3.76\n58.5380\n\n\n7\nAccessories\nHandbag\n3.78\n57.8889\n\n\n8\nClothing\nT-shirt\n3.78\n62.9116\n\n\n9\nClothing\nDress\n3.75\n62.1687\n\n\n10\nClothing\nShirt\n3.63\n61.1361\n\n\n11\nClothing\nBlouse\n3.68\n60.8772\n\n\n12\nClothing\nJeans\n3.65\n60.8710\n\n\n13\nClothing\nShorts\n3.71\n60.0828\n\n\n14\nClothing\nSkirt\n3.78\n59.5063\n\n\n15\nClothing\nPants\n3.72\n59.0058\n\n\n16\nClothing\nSocks\n3.75\n58.1887\n\n\n17\nClothing\nHoodie\n3.72\n58.0596\n\n\n18\nClothing\nSweater\n3.77\n57.6951\n\n\n19\nFootwear\nBoots\n3.81\n62.6250\n\n\n20\nFootwear\nShoes\n3.75\n61.6000\n\n\n21\nFootwear\nSneakers\n3.76\n59.5517\n\n\n22\nFootwear\nSandals\n3.84\n57.5000\n\n\n23\nOuterwear\nCoat\n3.73\n57.6087\n\n\n24\nOuterwear\nJacket\n3.76\n56.7423\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nwith shipping as\n(select\nShipping_Type,\ncount(*) Count,\navg(Purchase_Amount_USD) Avg_Purchase_Value\nfrom shopping_trends\ngroup by 1 \norder by 3 desc\n)\nselect * from shipping\nwhere Shipping_Type in('Free Shipping','Express')\n\n\n\n\n\n\n\n\n\nShipping_Type\nCount\nAvg_Purchase_Value\n\n\n\n\n0\nExpress\n646\n60.4752\n\n\n1\nFree Shipping\n675\n60.4104"
  },
  {
    "objectID": "posts/shopping-trends/index.html#project-overview",
    "href": "posts/shopping-trends/index.html#project-overview",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "Project Overview",
    "text": "Project Overview\nIn this project, we will be analyzing the shopping behavior of customers in a retail store. We will be using SQL to extract the data from the database and then use Python to analyze the data. We will be using the Pandas library to perform the analysis."
  },
  {
    "objectID": "posts/shopping-trends/index.html#importing-libraries",
    "href": "posts/shopping-trends/index.html#importing-libraries",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "Importing Libraries",
    "text": "Importing Libraries\n\nimport pandas as pd\nimport numpy as np \nimport duckdb as db"
  },
  {
    "objectID": "posts/shopping-trends/index.html#data-preprocessing",
    "href": "posts/shopping-trends/index.html#data-preprocessing",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "Data Preprocessing",
    "text": "Data Preprocessing\n\ndf = pd.read_csv('shopping_trends.csv')\ndf.head()\n\nshop = df.copy()\nshop.columns\nshop.info()\nshop.isna().sum()\nshop.describe()\n\nshop.columns = shop.columns.str.replace(' ', '_')\nshop.rename(columns={'Purchase_Amount_(USD)': 'Purchase_Amount_USD'}, inplace=True)"
  },
  {
    "objectID": "posts/shopping-trends/index.html#connecting-to-database",
    "href": "posts/shopping-trends/index.html#connecting-to-database",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "Connecting to Database",
    "text": "Connecting to Database\n\nfrom sqlalchemy import create_engine as ce\nengine = ce('mysql+pymysql://root:Karandeep2417@localhost:3306/datawarehouseanalytics')\nconn = engine.connect()\n\nshop.to_sql('shopping_trends', conn, if_exists='replace', index=False)"
  },
  {
    "objectID": "posts/shopping-trends/index.html#exploratory-data-analysis",
    "href": "posts/shopping-trends/index.html#exploratory-data-analysis",
    "title": "Customer Shopping Behaviour Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nAge & Gender Distribution of Customers\n\n\nShow SQL Query\n%%sql\nSELECT \nGender,\nAVG(Purchase_Amount_USD) AS avg_usd_spent,\nSUM(Purchase_Amount_USD) AS total_usd_spent\nFROM shopping_trends\nGROUP BY 1;\n\n\n\n\n\n\n\n\n\nGender\navg_usd_spent\ntotal_usd_spent\n\n\n\n\n0\nMale\n59.5362\n157890\n\n\n1\nFemale\n60.2492\n75191\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nCASE WHEN Age BETWEEN 18 AND 35 THEN \"Young\" \n     WHEN Age BETWEEN 35 AND 55 THEN \"Middle Age\"\n     ELSE \"Elderly\"\nEND AS age_group,\nCOUNT(*) AS customer_count,\nAVG(Purchase_Amount_USD) AS avg_usd_spent,\nSUM(Purchase_Amount_USD) AS total_usd_spent    \nfrom shopping_trends\nGROUP BY 1;\n\n\n\n\n\n\n\n\n\nage_group\ncustomer_count\navg_usd_spent\ntotal_usd_spent\n\n\n\n\n0\nMiddle Age\n1482\n59.9548\n88853\n\n\n1\nYoung\n1313\n60.1462\n78972\n\n\n2\nElderly\n1105\n59.0552\n65256\n\n\n\n\n\n\n\n\n\n\nCustomer Purchase Behaviors based on location, gender, and subscription status.\n\n\nShow SQL Query\n%%sql\nSELECT \nLocation,\nGender,\nSubscription_Status,\ncount(*) Customer_Count,\navg(Purchase_Amount_USD) Avg_Dollar_Spent\nfrom shopping_trends\ngroup by 1,2,3\nORDER BY 1 , 2 desc, 3 desc\n\n\n\n\n\n\n\n\n\nLocation\nGender\nSubscription_Status\nCustomer_Count\nAvg_Dollar_Spent\n\n\n\n\n0\nAlabama\nMale\nYes\n22\n63.4091\n\n\n1\nAlabama\nMale\nNo\n40\n54.7000\n\n\n2\nAlabama\nFemale\nNo\n27\n62.1481\n\n\n3\nAlaska\nMale\nYes\n18\n59.3889\n\n\n4\nAlaska\nMale\nNo\n30\n68.9333\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\nWisconsin\nMale\nNo\n37\n56.5405\n\n\n146\nWisconsin\nFemale\nNo\n25\n53.4000\n\n\n147\nWyoming\nMale\nYes\n20\n58.0000\n\n\n148\nWyoming\nMale\nNo\n31\n67.0323\n\n\n149\nWyoming\nFemale\nNo\n20\n53.5500\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\n\nMost Preferred product categories and colors by different age groups\n\n\nShow SQL Query\n%%sql\nwith preferred_product as\n(select \nCASE WHEN Age BETWEEN 18 AND 35 THEN \"Young\" \n     WHEN Age BETWEEN 35 AND 55 THEN \"Middle Age\"\n     ELSE \"Elderly\"\nEND AS age_group,\nCategory,\nColor,\nCount(*) total_purchased_items\nfrom shopping_trends\ngroup by 1,2,3\norder by 1,2,4 desc),\nranked as \n(\nselect \n*,\nrank() over(partition by age_group, Category order by total_purchased_items desc) as rnk\nfrom  preferred_product\n)\nselect \nage_group,\nCategory,\nColor,\ntotal_purchased_items\nfrom ranked where rnk = 1;\n\n\n\n\n\n\n\n\n\nage_group\nCategory\nColor\ntotal_purchased_items\n\n\n\n\n0\nElderly\nAccessories\nOlive\n21\n\n\n1\nElderly\nClothing\nCharcoal\n30\n\n\n2\nElderly\nFootwear\nOlive\n9\n\n\n3\nElderly\nFootwear\nTurquoise\n9\n\n\n4\nElderly\nFootwear\nViolet\n9\n\n\n5\nElderly\nFootwear\nLavender\n9\n\n\n6\nElderly\nFootwear\nMaroon\n9\n\n\n7\nElderly\nOuterwear\nTeal\n9\n\n\n8\nMiddle Age\nAccessories\nPeach\n24\n\n\n9\nMiddle Age\nAccessories\nRed\n24\n\n\n10\nMiddle Age\nClothing\nViolet\n35\n\n\n11\nMiddle Age\nFootwear\nPink\n18\n\n\n12\nMiddle Age\nOuterwear\nGray\n11\n\n\n13\nYoung\nAccessories\nMagenta\n25\n\n\n14\nYoung\nClothing\nMaroon\n32\n\n\n15\nYoung\nFootwear\nYellow\n14\n\n\n16\nYoung\nOuterwear\nGreen\n7\n\n\n17\nYoung\nOuterwear\nCharcoal\n7\n\n\n\n\n\n\n\n\n\n\nDo customers with higher previous purchases tend to spend more per transaction?\n\n\nShow SQL Query\n%%sql\nselect \nCustomer_ID,\navg(Purchase_Amount_USD) avg_dollar_spent_per_transaction,\nsum(Previous_Purchases) previous_purchase\nfrom shopping_trends\ngroup by 1\norder by 3 desc\n\n\n\n\n\n\n\n\n\nCustomer_ID\navg_dollar_spent_per_transaction\nprevious_purchase\n\n\n\n\n0\n3257\n26.0000\n50\n\n\n1\n3262\n52.0000\n50\n\n\n2\n3394\n90.0000\n50\n\n\n3\n3436\n91.0000\n50\n\n\n4\n3438\n62.0000\n50\n\n\n...\n...\n...\n...\n\n\n3895\n3729\n31.0000\n1\n\n\n3896\n3792\n51.0000\n1\n\n\n3897\n3803\n72.0000\n1\n\n\n3898\n3865\n99.0000\n1\n\n\n3899\n3888\n34.0000\n1\n\n\n\n\n3900 rows × 3 columns\n\n\n\n\n\n\nAverage purchase amount for each category & product type generates the most revenue\n\n\nShow SQL Query\n%%sql\nselect \nCategory,\navg(Purchase_Amount_USD) avg_dollar_spent\nfrom shopping_trends\ngroup by 1 \norder by 1\n\n\n\n\n\n\n\n\n\nCategory\navg_dollar_spent\n\n\n\n\n0\nAccessories\n59.8387\n\n\n1\nClothing\n60.0253\n\n\n2\nFootwear\n60.2554\n\n\n3\nOuterwear\n57.1728\n\n\n\n\n\n\n\n\n\n\nShow SQL Query\n%%sql\nselect \nItem_Purchased as Product_Type,\nsum(Purchase_Amount_USD) Revenue_Generated\nfrom shopping_trends\ngroup by 1 \norder by 2 desc\n\n\n\n\n\n\n\n\n\nProduct_Type\nRevenue_Generated\n\n\n\n\n0\nBlouse\n10410\n\n\n1\nShirt\n10332\n\n\n2\nDress\n10320\n\n\n3\nPants\n10090\n\n\n4\nJewelry\n10010\n\n\n5\nSunglasses\n9649\n\n\n6\nBelt\n9635\n\n\n7\nScarf\n9561\n\n\n8\nSweater\n9462\n\n\n9\nShorts\n9433\n\n\n10\nSkirt\n9402\n\n\n11\nHat\n9375\n\n\n12\nCoat\n9275\n\n\n13\nSocks\n9252\n\n\n14\nJacket\n9249\n\n\n15\nT-shirt\n9248\n\n\n16\nShoes\n9240\n\n\n17\nSandals\n9200\n\n\n18\nBoots\n9018\n\n\n19\nHandbag\n8857\n\n\n20\nHoodie\n8767\n\n\n21\nBackpack\n8636\n\n\n22\nSneakers\n8635\n\n\n23\nGloves\n8477\n\n\n24\nJeans\n7548\n\n\n\n\n\n\n\n\n\nImpact of purchase frequency on total spending.\n\n\nShow SQL Query\n%%sql\nselect \nFrequency_of_Purchases,\nsum(Purchase_Amount_USD) Dollar_Spent\nfrom shopping_trends\ngroup by 1\norder by 2 desc; \n\n\n\n\n\n\n\n\n\nFrequency_of_Purchases\nDollar_Spent\n\n\n\n\n0\nEvery 3 Months\n35088\n\n\n1\nAnnually\n34419\n\n\n2\nQuarterly\n33771\n\n\n3\nBi-Weekly\n33200\n\n\n4\nMonthly\n32810\n\n\n5\nFortnightly\n32007\n\n\n6\nWeekly\n31786\n\n\n\n\n\n\n\n\n\n\nMost preferred payment method and its impact on total spending\n\n\nShow SQL Query\n%%sql\nselect \nPayment_Method,\ncount(*) count,\nsum(Purchase_Amount_USD) Total_Dollars_Spent\nfrom shopping_trends\ngroup by 1\norder by 1 desc,2 desc;\n\n\n\n\n\n\n\n\n\nPayment_Method\ncount\nTotal_Dollars_Spent\n\n\n\n\n0\nVenmo\n653\n39991\n\n\n1\nPayPal\n638\n37449\n\n\n2\nDebit Card\n633\n37118\n\n\n3\nCredit Card\n696\n42567\n\n\n4\nCash\n648\n38833\n\n\n5\nBank Transfer\n632\n37123\n\n\n\n\n\n\n\n\n\n\nWhat are the Seasonal Product Trends?\n\n\nShow SQL Query\n%%sql\nwith trends as \n(select \nSeason,\nItem_Purchased as Product,\ncount(*) Items_Purchased\nfrom shopping_trends\ngroup by 1,2\norder by 1,3 desc\n),\nranked as (\nselect \n*,\nrank() over(PARTITION BY Season order by Items_Purchased desc) as rnk\nfrom trends\n)\nselect Season,Product,Items_Purchased \nfrom ranked\nwhere rnk between 1 and 3;\n\n\n\n\n\n\n\n\n\nSeason\nProduct\nItems_Purchased\n\n\n\n\n0\nFall\nJacket\n54\n\n\n1\nFall\nHat\n50\n\n\n2\nFall\nHandbag\n48\n\n\n3\nSpring\nSweater\n52\n\n\n4\nSpring\nShorts\n47\n\n\n5\nSpring\nBlouse\n46\n\n\n6\nSpring\nCoat\n46\n\n\n7\nSpring\nSkirt\n46\n\n\n8\nSummer\nPants\n50\n\n\n9\nSummer\nJewelry\n47\n\n\n10\nSummer\nDress\n47\n\n\n11\nWinter\nSunglasses\n52\n\n\n12\nWinter\nPants\n51\n\n\n13\nWinter\nShirt\n50\n\n\n\n\n\n\n\n\n\n\nImpact of discounts and promo codes on sales\n\n\nShow SQL Query\n%%sql\nselect \nDiscount_Applied,\nPromo_Code_Used ,\ncount(*) Count,\nsum(Purchase_Amount_USD) Sales,\navg(Purchase_Amount_USD) Avg_Dollar_Spent\nfrom shopping_trends\nGROUP BY 1,2\n\n\n\n\n\n\n\n\n\nDiscount_Applied\nPromo_Code_Used\nCount\nSales\nAvg_Dollar_Spent\n\n\n\n\n0\nYes\nYes\n1677\n99411\n59.2791\n\n\n1\nNo\nNo\n2223\n133670\n60.1305\n\n\n\n\n\n\n\n\n\n\nImpact of Subscription Status on Spending Habbit\n\n\nShow SQL Query\n%%sql\nselect \nSubscription_Status, \nGender,\ncount(*) Cust_Count,\navg(Purchase_Amount_USD) Avg_Dollar_Spent,\nsum(Purchase_Amount_USD) Revenue\nfrom shopping_trends\ngroup by 1,2\n\n\n\n\n\n\n\n\n\nSubscription_Status\nGender\nCust_Count\nAvg_Dollar_Spent\nRevenue\n\n\n\n\n0\nYes\nMale\n1053\n59.4919\n62645\n\n\n1\nNo\nMale\n1599\n59.5654\n95245\n\n\n2\nNo\nFemale\n1248\n60.2492\n75191\n\n\n\n\n\n\n\n\n\n\nImpact of shipping type on total purchase value\n\n\nShow SQL Query\n%%sql\nselect\nShipping_Type,\ncount(*) Count,\nsum(Purchase_Amount_USD) Total_Purchase_Value,\navg(Purchase_Amount_USD) Avg_Purchase_Value\nfrom shopping_trends\ngroup by 1 \norder by 3 desc;\n\n\n\n\n\n\n\n\n\nShipping_Type\nCount\nTotal_Purchase_Value\nAvg_Purchase_Value\n\n\n\n\n0\nFree Shipping\n675\n40777\n60.4104\n\n\n1\nExpress\n646\n39067\n60.4752\n\n\n2\nStore Pickup\n650\n38931\n59.8938\n\n\n3\nStandard\n654\n38233\n58.4602\n\n\n4\n2-Day Shipping\n627\n38080\n60.7337\n\n\n5\nNext Day Air\n648\n37993\n58.6312\n\n\n\n\n\n\n\n\n\n\nCorreleation between review rating and avg purchase value.\n\n\nShow SQL Query\n%%sql\nselect\nCategory,\nItem_Purchased Product,\nround(avg(Review_Rating),2) Avg_Review ,\nAVG(Purchase_Amount_USD) avg_spent\nfrom shopping_trends\ngroup by 1,2\norder by 1,4 desc;\n\n\n\n\n\n\n\n\n\nCategory\nProduct\nAvg_Review\navg_spent\n\n\n\n\n0\nAccessories\nScarf\n3.70\n60.8981\n\n\n1\nAccessories\nHat\n3.81\n60.8766\n\n\n2\nAccessories\nGloves\n3.86\n60.5500\n\n\n3\nAccessories\nBackpack\n3.75\n60.3916\n\n\n4\nAccessories\nSunglasses\n3.74\n59.9317\n\n\n5\nAccessories\nBelt\n3.76\n59.8447\n\n\n6\nAccessories\nJewelry\n3.76\n58.5380\n\n\n7\nAccessories\nHandbag\n3.78\n57.8889\n\n\n8\nClothing\nT-shirt\n3.78\n62.9116\n\n\n9\nClothing\nDress\n3.75\n62.1687\n\n\n10\nClothing\nShirt\n3.63\n61.1361\n\n\n11\nClothing\nBlouse\n3.68\n60.8772\n\n\n12\nClothing\nJeans\n3.65\n60.8710\n\n\n13\nClothing\nShorts\n3.71\n60.0828\n\n\n14\nClothing\nSkirt\n3.78\n59.5063\n\n\n15\nClothing\nPants\n3.72\n59.0058\n\n\n16\nClothing\nSocks\n3.75\n58.1887\n\n\n17\nClothing\nHoodie\n3.72\n58.0596\n\n\n18\nClothing\nSweater\n3.77\n57.6951\n\n\n19\nFootwear\nBoots\n3.81\n62.6250\n\n\n20\nFootwear\nShoes\n3.75\n61.6000\n\n\n21\nFootwear\nSneakers\n3.76\n59.5517\n\n\n22\nFootwear\nSandals\n3.84\n57.5000\n\n\n23\nOuterwear\nCoat\n3.73\n57.6087\n\n\n24\nOuterwear\nJacket\n3.76\n56.7423\n\n\n\n\n\n\n\n\n\n\nFree Shipping vs Express (Insights)\n\n\nShow SQL Query\n%%sql\nwith shipping as\n(select\nShipping_Type,\ncount(*) Count,\navg(Purchase_Amount_USD) Avg_Purchase_Value\nfrom shopping_trends\ngroup by 1 \norder by 3 desc\n)\nselect * from shipping\nwhere Shipping_Type in('Free Shipping','Express')\n\n\n\n\n\n\n\n\n\nShipping_Type\nCount\nAvg_Purchase_Value\n\n\n\n\n0\nExpress\n646\n60.4752\n\n\n1\nFree Shipping\n675\n60.4104"
  }
]